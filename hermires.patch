diff -uNr src.clean/c64.h src.modified/c64.h
--- src.clean/c64.h	1970-01-01 01:00:00.000000000 +0100
+++ src.modified/c64.h	2013-06-03 02:09:31.900096047 +0100
@@ -0,0 +1,76 @@
+
+
+
+//--------------------C64 'exe.prg'-export's native displayer code--------------
+unsigned char bmpExe[]=  //generated from ghex's .html output, '0x'-es and ','-s are appended with Geany
+{
+0x01,0x08,0x0b,0x08,0xdc,0x07,0x9e,0x32,0x30,0x36,0x34,0x00,0x00,0x00,0x00,0x00,
+0x00,0x78,0xa9,0x35,0x85,0x01,0xa9,0x03,0x8d,0x00,0xdd,0x8d,0x11,0xd0,0xad,0x28,
+0x2d,0x8d,0x20,0xd0,0x8d,0x21,0xd0,0x8d,0xb0,0x09,0x20,0xbd,0x08,0x20,0x25,0x09,
+0xa9,0x18,0x8d,0x18,0xd0,0xa9,0x3b,0x8d,0x11,0xd0,0xa9,0x08,0x8d,0x16,0xd0,0xad,
+0xd8,0x09,0xf0,0xfb,0xa9,0xf9,0xcd,0x12,0xd0,0xd0,0xfb,0xad,0x11,0xd0,0x09,0x20,
+0x29,0xf7,0x8d,0x11,0xd0,0x29,0xf7,0x8d,0x11,0xd0,0xa9,0xff,0x8d,0x15,0xd0,0xa9,
+0xfa,0xcd,0x12,0xd0,0xd0,0xfb,0xa2,0x09,0xca,0xd0,0xfd,0xad,0x11,0xd0,0x29,0xdf,
+0x8d,0x11,0xd0,0xa9,0x00,0xcd,0x12,0xd0,0xd0,0xfb,0xa9,0x00,0x8d,0x21,0xd0,0xa9,
+0x09,0xcd,0x12,0xd0,0xd0,0xfb,0xea,0xad,0x11,0xd0,0x09,0x08,0x29,0xdf,0x8d,0x11,
+0xd0,0xac,0xb0,0x09,0xa2,0x15,0xca,0xd0,0xfd,0xea,0x8c,0x21,0xd0,0xa9,0x00,0x8d,
+0x15,0xd0,0xad,0x12,0xd0,0xd0,0xfb,0xa9,0x32,0xcd,0x12,0xd0,0xd0,0xfb,0xa2,0x0a,
+0xca,0xd0,0xfd,0xad,0x11,0xd0,0x09,0x28,0x8d,0x11,0xd0,0x4c,0x43,0x08,0xa0,0x00,
+0xb9,0x40,0x29,0x99,0x00,0x04,0xb9,0x40,0x2a,0x99,0x00,0x05,0xb9,0x40,0x2b,0x99,
+0x00,0x06,0xb9,0x40,0x2c,0x99,0x00,0x07,0xc8,0xd0,0xe5,0xa9,0x00,0xa2,0x29,0x85,
+0xfc,0x86,0xfd,0xa9,0x00,0xa2,0x3f,0x85,0xfe,0x86,0xff,0xa0,0x00,0xb1,0xfc,0x91,
+0xfe,0xc8,0xd0,0xf9,0xc6,0xfd,0xc6,0xff,0xa5,0xff,0xc9,0x20,0x10,0xef,0xa2,0x07,
+0x8a,0x0a,0xa8,0xa9,0x01,0x99,0x01,0xd0,0xbd,0x90,0x09,0x99,0x00,0xd0,0xa9,0x0f,
+0x9d,0x27,0xd0,0x8a,0x18,0x69,0x30,0x9d,0xf8,0x07,0xca,0x10,0xe3,0xa9,0x00,0x8d,
+0x10,0xd0,0x8d,0xff,0x3f,0x60,0xa0,0x00,0xa9,0x00,0x99,0x00,0x0c,0x99,0x00,0x0d,
+0xc8,0xd0,0xf5,0xa2,0x00,0x86,0xfa,0xa6,0xfa,0xa9,0x00,0x8d,0x77,0x09,0x8d,0x78,
+0x09,0xbd,0xd8,0x09,0xf0,0x4a,0x0a,0x2e,0x78,0x09,0x0a,0x2e,0x78,0x09,0x0a,0x2e,
+0x78,0x09,0x8d,0x77,0x09,0xad,0x78,0x09,0x18,0x69,0xd8,0x8d,0x78,0x09,0xa9,0x00,
+0x18,0x7d,0x98,0x09,0x85,0xfe,0xa0,0x0c,0xe0,0x0c,0x90,0x01,0xc8,0x84,0xff,0xa9,
+0x33,0x85,0x01,0xa0,0x00,0xa2,0x00,0xbd,0x11,0x11,0x91,0xfe,0xc8,0xc8,0xc8,0xe8,
+0xe0,0x08,0xd0,0xf3,0xa9,0x35,0x85,0x01,0xe6,0xfa,0xa6,0xfa,0xe0,0x18,0xd0,0xa7,
+0x60,0x50,0x68,0x80,0x98,0xb0,0xc8,0xe0,0xf8,0x00,0x01,0x02,0x40,0x41,0x42,0x80,
+0x81,0x82,0xc0,0xc1,0xc2,0x00,0x01,0x02,0x40,0x41,0x42,0x80,0x81,0x82,0xc0,0xc1,
+0xc2,0x00
+};
+
+unsigned char AFLIexe[]= //generated from ghex's .html output, '0x'-es and ','-s are appended with Geany
+{
+0x01,0x08,0x0b,0x08,0xdc,0x07,0x9e,0x32,0x30,0x36,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x78,
+0xa9,0x35,0x85,0x01,0x20,0x43,0x09,0x20,0xb5,0x09,0xa9,0x2e,0xcd,0x12,0xd0,0xd0,0xfb,0xea,
+0xa9,0x00,0x8d,0x21,0xd0,0xea,0xea,0xea,0xea,0xea,0xa0,0x19,0xa2,0x38,0xa9,0x80,0x8e,0x11,
+0xd0,0x8d,0x18,0xd0,0xee,0x2f,0xd0,0xa9,0x90,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xce,0x2f,
+0xd0,0xa9,0xa0,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xee,0x2f,0xd0,0xa9,0xb0,0xe8,0x8e,0x11,
+0xd0,0x8d,0x18,0xd0,0xce,0x2f,0xd0,0xa9,0xc0,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xee,0x2f,
+0xd0,0xa9,0xd0,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xce,0x2f,0xd0,0xa9,0xe0,0xe8,0x8e,0x11,
+0xd0,0x8d,0x18,0xd0,0xea,0xea,0xea,0xa9,0xf0,0xe8,0x8e,0x11,0xd0,0x9d,0xd9,0xcf,0x88,0x10,
+0x9f,0xa9,0xfa,0xcd,0x12,0xd0,0xd0,0xfb,0xa9,0x17,0x8d,0x11,0xd0,0xa9,0x03,0x8d,0x00,0xdd,
+0xa9,0x00,0x8d,0x17,0xd0,0x8d,0x1c,0xd0,0xa9,0x18,0x8d,0x18,0xd0,0xa2,0x03,0xca,0xd0,0xfd,
+0xad,0x82,0x0a,0x8d,0x21,0xd0,0xa0,0x0f,0xa9,0x01,0x99,0x27,0xd0,0xb9,0x5a,0x0a,0x99,0x00,
+0xd0,0x88,0x10,0xf2,0xa9,0x00,0xcd,0x12,0xd0,0xd0,0xfb,0xa2,0x04,0xca,0xd0,0xfd,0xa9,0x00,
+0x8d,0x21,0xd0,0xa9,0x09,0xcd,0x12,0xd0,0xd0,0xfb,0xea,0xa9,0x18,0x8d,0x11,0xd0,0xac,0x82,
+0x0a,0xa2,0x16,0xca,0xd0,0xfd,0xea,0xea,0x8c,0x21,0xd0,0xe8,0x8e,0x10,0xd0,0xa9,0x40,0x8d,
+0x00,0xd0,0xa9,0x0c,0x8d,0x27,0xd0,0xad,0x12,0xd0,0xd0,0xfb,0xa2,0x00,0x8e,0x15,0xd0,0xa9,
+0x24,0xcd,0x12,0xd0,0xd0,0xfb,0xa9,0x02,0x8d,0x00,0xdd,0xa9,0x80,0x8d,0x18,0xd0,0xa9,0xff,
+0x8d,0x15,0xd0,0xa9,0x6b,0x8d,0x17,0xd0,0x8d,0x1c,0xd0,0xa0,0x0f,0xad,0x83,0x0a,0x99,0x27,
+0xd0,0xb9,0x2b,0x0a,0x99,0x00,0xd0,0x88,0x10,0xf1,0xa9,0x00,0x8d,0x10,0xd0,0x4c,0x1b,0x08,
+0xa0,0x2e,0xb9,0x2b,0x0a,0x99,0x00,0xd0,0x88,0x10,0xf7,0xad,0xe8,0x4a,0x8d,0x20,0xd0,0x8d,
+0x21,0xd0,0x8d,0x82,0x0a,0xad,0xe9,0x4a,0x8d,0x25,0xd0,0xad,0xea,0x4a,0x8d,0x83,0x0a,0xad,
+0xeb,0x4a,0x8d,0x26,0xd0,0xa0,0x00,0xa9,0x00,0xa2,0x4b,0x85,0xfc,0x86,0xfd,0xa9,0x00,0xa2,
+0x80,0x85,0xfe,0x86,0xff,0xa0,0x00,0xb1,0xfc,0x91,0xfe,0xc8,0xd0,0xf9,0xc6,0xfd,0xc6,0xff,
+0xa5,0xff,0xc9,0x40,0x10,0xef,0xa0,0x07,0xa9,0x7d,0x99,0xf8,0x7f,0xa9,0x7e,0x8d,0xfe,0x7f,
+0x88,0x10,0xf3,0xa2,0x07,0x8a,0x18,0x69,0x30,0x9d,0xf8,0x07,0xca,0x10,0xf6,0xa9,0x00,0x8d,
+0xff,0x3f,0x8d,0xff,0x7f,0x60,0xa0,0x00,0xa9,0x00,0x99,0x00,0x0c,0x99,0x00,0x0d,0xc8,0xd0,
+0xf5,0xa2,0x00,0x86,0xfa,0xa6,0xfa,0xa9,0x00,0x8d,0x07,0x0a,0x8d,0x08,0x0a,0xbd,0xd8,0x0a,
+0xf0,0x4a,0x0a,0x2e,0x08,0x0a,0x0a,0x2e,0x08,0x0a,0x0a,0x2e,0x08,0x0a,0x8d,0x07,0x0a,0xad,
+0x08,0x0a,0x18,0x69,0xd8,0x8d,0x08,0x0a,0xa9,0x00,0x18,0x7d,0x6a,0x0a,0x85,0xfe,0xa0,0x0c,
+0xe0,0x0c,0x90,0x01,0xc8,0x84,0xff,0xa9,0x33,0x85,0x01,0xa0,0x00,0xa2,0x00,0xbd,0x11,0x11,
+0x91,0xfe,0xc8,0xc8,0xc8,0xe8,0xe0,0x08,0xd0,0xf3,0xa9,0x35,0x85,0x01,0xe6,0xfa,0xa6,0xfa,
+0xe0,0x18,0xd0,0xa7,0xa0,0x0e,0xb9,0x84,0x0a,0x99,0x21,0x0c,0x88,0x10,0xf7,0x60,0x18,0x84,
+0x18,0x30,0x50,0x01,0x18,0x5a,0x68,0x01,0x18,0xae,0x18,0xd8,0x80,0x01,0x00,0x08,0x2d,0x00,
+0x00,0xff,0x08,0x6b,0x80,0x01,0x01,0xff,0x6b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,
+0x0e,0x01,0x02,0x0f,0x04,0x0f,0x06,0x07,0x0f,0x50,0x01,0x68,0x01,0x80,0x01,0x98,0x01,0xb0,
+0x01,0xc8,0x01,0xe0,0x01,0xf8,0x01,0x00,0x01,0x02,0x40,0x41,0x42,0x80,0x81,0x82,0xc0,0xc1,
+0xc2,0x00,0x01,0x02,0x40,0x41,0x42,0x80,0x81,0x82,0xc0,0xc1,0xc2,0x00,0x00,0x4e,0x7b,0x1a,
+0x9b,0x63,0x19,0x9f,0x7b,0x19,0x9b,0x63,0x19,0x5b,0x63,0xda
+};
diff -uNr src.clean/HermIRES.cpp src.modified/HermIRES.cpp
--- src.clean/HermIRES.cpp	2013-04-25 17:50:48.000000000 +0100
+++ src.modified/HermIRES.cpp	2013-06-03 02:12:50.280097758 +0100
@@ -10,61 +10,8 @@
 #include <stdio.h>
 //#include <map>
 
-//------------------------ Operating system specific ---------------------------
-#if defined ALLEGRO_WITH_XWINDOWS && defined ALLEGRO_USE_CONSTRUCTOR
-// XPM program-icon for linux
-static const char *allegico_xpm[] = {
-"32 32 8 1 ", // columns, rows, colors, chars-per-pixel
-"  c black",
-". c #494949494949",
-"X c #6D6D6D6D6D6D",
-"o c #B6B600000000",
-"O c #B6B624242424",
-"+ c #6D6D6D6DDBDB",
-"@ c #6D6D6D6DFFFF",
-"# c #B6B6B6B6B6B6",
-/* pixels */
-"                                ",
-"                                ",
-"   .       .       .       .    ",
-"   X       X@@@@@@@X       X    ",
-"   #     @@#@@@@@@@#       #    ",
-"   #    @@@#@@@@@@@#       #    ",
-" .###########################.  ",
-"   #  @@@@@#@@@@@@@#       #    ",
-"   # @@@@@@#@@@@@@@#       #    ",
-"   # @+@@@@#       #@@++++@#    ",
-"   #++++++ #       #+++++++#    ",
-"   #@@@@@@ #       #@@@@@@ #    ",
-"   #@@@@@@ #       #@@@@@  #    ",
-"   #@@@@@@ #       #@@@@   #    ",
-" .###########################.  ",
-"   #@@@@@@ #       #oooo   #    ",
-"   #@@@@@@ #       #ooooo  #    ",
-"   #@@@@@@ #       #oooooo #    ",
-"   #++++++ #       #OOOOOOO#    ",
-"   # @@@@@@#       #ooooooo#    ",
-"   # @@@@@@#@@@@@@@#       #    ",
-"   #  @@@@@#@@@@@@@#       #    ",
-" .###########################.  ",
-"   #    @@@#@@@@@@@#       #    ",
-"   #     @@#@@@@@@@#       #    ",
-"   #      @#@@@@@@@#       #    ",
-"   #       #       #       #    ",
-"   #       #       #       #    ",
-"   X       X       X       X    ",
-"   .       .       .       .    ",
-"                                ",
-"                                "
-};
-extern void *allegro_icon;
-CONSTRUCTOR_FUNCTION(static void _set_allegro_icon(void));
-static void _set_allegro_icon(void)
-{
-    allegro_icon = allegico_xpm;
-}
-#endif
-
+#include "linux.h"
+#include "c64.h"
 
 //--------------------------------------global variable declarations-----------------------------------------------------
 
@@ -78,12 +25,12 @@
 const unsigned char pow2[8] = {128,64,32,16,8,4,2,1}; //powers of 2 precalculated for fast conversion
 int GUIbgColor=0x102030;
 int ChrSizeX=8, ChrSizeY=8, NoOfChrX=40, NoOfChrY=25;
-int FieldSizeX = ChrSizeX*NoOfChrX; //SprSizeX*NoOfSprX; 
+int FieldSizeX = ChrSizeX*NoOfChrX; //SprSizeX*NoOfSprX;
 int FieldSizeY = ChrSizeY*NoOfChrY; //SprSizeY*NoOfSprY;
 int Mag_min=3, Mag_max=32, MagnifyFactor = Mag_min, Grid_treshold=4, CRTemu_treshold=Mag_min+4, DefaultBlur=180, PALblur=DefaultBlur, Brightness=128;
 int GridBorder=10, GridPosX = GridBorder, GridPosY = GridBorder, GridSizeX = Mag_min*FieldSizeX, GridSizeY = Mag_min*FieldSizeY, GridCol = 0x202020,ChrRangeCol = 0xC0C0C0;
-int WheelBuf = MagnifyFactor, MButtBuf=0, PreviewPosX=GridBorder, PreviewPosY=GridPosY+GridSizeY+GridBorder; 
-int GuiSizeX=FieldSizeX*MagnifyFactor+GridBorder*2, GuiSizeY=FieldSizeY+PreviewPosY+GridBorder; 
+int WheelBuf = MagnifyFactor, MButtBuf=0, PreviewPosX=GridBorder, PreviewPosY=GridPosY+GridSizeY+GridBorder;
+int GuiSizeX=FieldSizeX*MagnifyFactor+GridBorder*2, GuiSizeY=FieldSizeY+PreviewPosY+GridBorder;
 int PalButtPosX=FieldSizeX+GridBorder*2, PalButtPosY=GridSizeY+GridBorder*2+10, PalButtSizeX = (GuiSizeX-PalButtPosX-GridBorder)/16, PalButtSizeY=GridSizeY/16;
 unsigned char BmpData [328][208]; //dimensions (FieldSizeX, FieldSizeY)
 unsigned char BmpClipBoard [320][200]; //dimensions (FieldSizeX, FieldSizeY)
@@ -93,35 +40,35 @@
 unsigned char ClashCnt[1040][8]; //colour-count of characters to determine clash - in AFLI-mode the 'slices' are contained in 2nd dimension of the array
 unsigned char ColorMap[1024][8]; //colour-map for the hires bitmap - or AFLI bitmap in case of AFLI-mode
 unsigned char CopyBuffer[8][8]; //buffer for copy
-unsigned char BorderColWidth=4, DefaultBorderCol=11, DefaultBGcol=12, BorderCol=DefaultBorderCol, DrawCol1=1, DrawCol2=DefaultBGcol, DitherCol=14, SelCol=0; 
+unsigned char BorderColWidth=4, DefaultBorderCol=11, DefaultBGcol=12, BorderCol=DefaultBorderCol, DrawCol1=1, DrawCol2=DefaultBGcol, DitherCol=14, SelCol=0;
 int CurPosX = 10, CurPosY = 10, GridInPosX=0, GridInPosY=0, ActChar=0, ActQuad=0, ActChrBuf=0; //default position & colours
 int mickeyx,mickeyy,TempPosX,TempPosY,TempPosX2,TempPosY2, TempStartX,TempStartY, PrevRightClick=0;
 const int ControlTimer = 20; //frequency of timer in milliseconds
-volatile int CloseButtState=FALSE; int RButt=0; 
+volatile int CloseButtState=FALSE; int RButt=0;
 char ConfigPath[480], ConfigFile[]="HermIRES.cfg";
-char SAVEpath[480]={"untitled.hbm"}; 
+char SAVEpath[480]={"untitled.hbm"};
 char *LOADpath=SAVEpath; //[480]={"examples/"};
 const char *IniPath;
-char VPLpath[480]={"palettes/pepto.vpl"};
+char VPLpath[480]={"/usr/share/hermires/palettes/"};
 unsigned int PrgStartAdd = 0x2000;  //bitmap-data loadaddress in hexadecimal
 unsigned int AFLIprgStartAdd = 0x4000; //AFLI bitmap-data loadaddress in hexa.
 unsigned int BASICstartAdd = 0x0801; //EXE export's BASIC starter load-address
 unsigned int EXEdataAdd = 0x0A00, AFLIEXEdataAdd = 0xB00; //EXE export's data-position
 unsigned char PreviewZoom = 1; //zooming ratio of preview
-int PenDiameter=4, TBSizeY=22, TButtSize=TBSizeY, NoOfButt = 8, TBSizeX=TButtSize*NoOfButt+1, 
+int PenDiameter=4, TBSizeY=22, TButtSize=TBSizeY, NoOfButt = 8, TBSizeX=TButtSize*NoOfButt+1,
     TBCol= 0xA0A0A0, TBFGCol = 0x20202020, TBSelCol = 0xffe080;
 int TBPosX = PreviewPosX+FieldSizeX+25,TBPosY = PreviewPosY+(GuiSizeY-PreviewPosY)/2-30;
 int TxtInfoPosX=TBPosX+TBSizeX+25, TxtInfoPosY=PalButtPosY+PalButtSizeY+30;
 int MenuPosX=GuiSizeX-210, MenuPosY=PalButtPosY+PalButtSizeY+30;
-int LinerSwitch = 1, DrawMode=0, RectFill=0, CircFill=0, DitherMode=0, Dither2Col=0; 
+int LinerSwitch = 1, DrawMode=0, RectFill=0, CircFill=0, DitherMode=0, Dither2Col=0;
 float pi=3.1415926, rad=pi/180, GridBrightness=1.00;
 unsigned char UndoStore[256][320][200]; //256 full hbm pictures can be stored for undo/redo in this ring-buffer array
 unsigned char UndoPointer = 0, UndoBase = 0, RedoMax=0; //undobase counts from 0..255 whenever UndoPointer reaches it, losing oldest step at that time
 int ShapeDrawn = 0, mousestartx, mousestarty;
 int ShapeRightButt=0;
-int ClashTimer=0, ClashBlinkSpeed=70; 
+int ClashTimer=0, ClashBlinkSpeed=70;
 int ClashBlinkRatio=8, BlinkOn=0;
-int ClashTestMode=4, GridMode=1; 
+int ClashTestMode=4, GridMode=1;
 int EnableBriGrid=true, CRTmode=1;
 int mouse_x_buf, mouse_y_buf;
 int SelectionStartX=0, SelectionStartY=0, SelectionEndX=FieldSizeX-1, SelectionEndY=FieldSizeY-1;
@@ -135,7 +82,7 @@
 unsigned char FLIbugCol1=0,FLIbugCol2=0,FLIbugCol3=0; //FLI-bug underlay-sprite colours
 
 //function prototypes
-void InitBmp(); //InitSpr(); 
+void InitBmp(); //InitSpr();
 void SetTimer();
 void GetControls();
 void BmpDrawer();
@@ -151,9 +98,9 @@
 int SelCol0(); int SelCol1(); int SelCol2(); int SelCol3(); int SelCol4(); int SelCol5(); int SelCol6(); int SelCol7(); int SelCol8(); int SelCol9();
 int SelColA(); int SelColB(); int SelColC(); int SelColD(); int SelColE(); int SelColF();
 int Pluser(); int Minuser(); void Zoomer(); void SettingDispl(); void CalcActChar();
-int ClearBmp(); void DispSelCol(); int Spacer(); int ExportC64(); int ExportExe(); int Deleter(); int CopyChar(); int Paster(); int Cutter(); 
+int ClearBmp(); void DispSelCol(); int Spacer(); int ExportC64(); int ExportExe(); int Deleter(); int CopyChar(); int Paster(); int Cutter();
 int Homer(); int Ender(); int PageUp(); int PageDn(); int Lefter(); int Righter(); int Upper(); int Downer(); void PrevText();
-int SelChrPosX(int Chrnum); 
+int SelChrPosX(int Chrnum);
 int SelChrPosY(int Chrnum);
 int SavePNG(); void LoadFile(); void LoadBMP(); void LoadPNG(); void LoadPalette();
 void DrawBmpData(int x, int y, unsigned char colour);
@@ -299,26 +246,26 @@
     {
      int i,width,height,taskbarsize=45;
      remove_timer();
-     get_desktop_resolution(&width, &height); 
+     get_desktop_resolution(&width, &height);
      for(i=4;i>=2;i--) //detect possible maximal resolution
      {
       Mag_min=MagnifyFactor=i; //every size and position is set to minimal magnification
       GridSizeX = Mag_min*FieldSizeX; GridSizeY = Mag_min*FieldSizeY;
-      PreviewPosX=GridBorder; PreviewPosY=GridPosY+GridSizeY+GridBorder; 
+      PreviewPosX=GridBorder; PreviewPosY=GridPosY+GridSizeY+GridBorder;
       GuiSizeX=FieldSizeX*Mag_min+GridBorder*2; GuiSizeY=PreviewPosY+FieldSizeY+GridBorder;
       if (i==2 || (GuiSizeX<width && GuiSizeY<height-taskbarsize) ) { set_gfx_mode(GFX_AUTODETECT_WINDOWED, GuiSizeX, GuiSizeY, 0, 0); break; }
      }
      CRTemu_treshold=Mag_min+4;
 
      PalButtPosX=FieldSizeX+GridBorder*2-2; PalButtPosY=GridSizeY+GridBorder*2+Mag_min; PalButtSizeX = (GuiSizeX-PalButtPosX)/16; PalButtSizeY=GridSizeY/16;
-     TBPosX = (Mag_min>2) ? PreviewPosX+FieldSizeX+8*Mag_min : PreviewPosX+FieldSizeX+10; 
+     TBPosX = (Mag_min>2) ? PreviewPosX+FieldSizeX+8*Mag_min : PreviewPosX+FieldSizeX+10;
      TBPosY = (Mag_min>2) ? PalButtPosY+PalButtSizeY+10*Mag_min : PalButtPosY+PalButtSizeY+10;
-     TxtInfoPosX=(Mag_min>2) ? GuiSizeX-(GuiSizeX-(TBPosX+TBSizeX))/2-200 : TBPosX+TBSizeX+5; 
+     TxtInfoPosX=(Mag_min>2) ? GuiSizeX-(GuiSizeX-(TBPosX+TBSizeX))/2-200 : TBPosX+TBSizeX+5;
      TxtInfoPosY=(Mag_min>2) ? PalButtPosY+PalButtSizeY+30 : PalButtPosY+PalButtSizeY+5;
      MenuPosX=(Mag_min>2)?GuiSizeX-215:GuiSizeX-188; MenuPosY=(Mag_min>2)?PalButtPosY+PalButtSizeY+25:PalButtPosY+PalButtSizeY+88;
      for(i=0; i<16; i++)
      {
-      HermIRESdialog[i+1].x=PalButtPosX+PalButtSizeX*i; HermIRESdialog[i+1].y=PalButtPosY; 
+      HermIRESdialog[i+1].x=PalButtPosX+PalButtSizeX*i; HermIRESdialog[i+1].y=PalButtPosY;
       HermIRESdialog[i+1].w=PalButtSizeX; HermIRESdialog[i+1].h=PalButtSizeY;
      }
      if (Mag_min<=2) { HermIRESdialog[17].x=HermIRESdialog[18].x=TBPosX+80; HermIRESdialog[19].x=HermIRESdialog[20].x=TBPosX+80+85; }
@@ -331,12 +278,12 @@
      }
      else
      { //'lores' mode buttons
-      for (i=0;i<8;i++) 
-       { 
+      for (i=0;i<8;i++)
+       {
         HermIRESdialog[21+i].w=85;
         HermIRESdialog[21+i].x=MenuPosX+(i&4)/4*95; HermIRESdialog[21+i].y=MenuPosY+(i&3)*22;
         HermIRESdialog[21+i].dp=shortButtName[i];
-       } 
+       }
       for (i=0;i<4;i++) { HermIRESdialog[29+i].x=MenuPosX-95; HermIRESdialog[29+i].y=MenuPosY+22*(3-i); }
      }
      HermIRESdialog[33].x=HermIRESdialog[31].x+45; HermIRESdialog[33].y=HermIRESdialog[31].y;  //'AFLI' button
@@ -351,7 +298,7 @@
   return NULL;
  }
  return flist->name[index]; */
- 
+
  /*DIR *pdir;
  struct dirent *pent;
 
@@ -368,13 +315,13 @@
  printf ("readdir() failure; terminating");
  }
  closedir(pdir);*/
- 
- /*return SAVEpath; 
+
+ /*return SAVEpath;
 }*/
 
 /*static DIALOG FileDialog [] =  //Array of GUI-dialog elements
 {
- // (proc)        (x)  (y)  (w) (h) (fg) (bg) (key) (flags) (d1) (d2) (dp)           (dp2) (dp3) 
+ // (proc)        (x)  (y)  (w) (h) (fg) (bg) (key) (flags) (d1) (d2) (dp)           (dp2) (dp3)
 //Clear Dialog screen
  { d_shadow_box_proc, 15,    80,310+FieldSizeX,      300,  0,    0,    0,    0,       0,    0,    NULL,             NULL, NULL  },
  { d_ctext_proc,      152, 100,    1,    1,    0,    0,    0,    0,       0,    0,    NULL,             NULL, },
@@ -389,7 +336,7 @@
 
 int FileSelector(const char *message, char *path, const char *ext, int size, int width, int height)
 {
- //if (RButt==1 || key_shifts&KB_SHIFT_FLAG)  
+ //if (RButt==1 || key_shifts&KB_SHIFT_FLAG)
   return file_select_ex(message,path,ext,size,width,height);
  /*else
  {
@@ -410,13 +357,13 @@
   FileDialog[3].x=FilerPosX+FilerSizeX/2-25*Mag_min-81; FileDialog[4].x=FilerPosX+FilerSizeX/2+25*Mag_min; //buttons
   FileDialog[3].y=FileDialog[4].y=FilerPosY+FilerSizeY-40; //buttons
   //popup_dialog(FileDialog, -1); do_dialog(FileDialog,-1);
-  DIALOG_PLAYER *player2 = init_dialog(FileDialog, -1); update_dialog(player2); 
-  
+  DIALOG_PLAYER *player2 = init_dialog(FileDialog, -1); update_dialog(player2);
+
  //FilePreview = load_png(LOADpath,BMPalette); //create_bitmap(FieldSizeX, FieldSizeY);
   //blit(FilePreview,screen,0,0,FilePrevPosX+1,FilePrevPosY+1,FieldSizeX,FieldSizeY);
-  
+
   while (update_dialog(player2))//main loop of GUI dialog
-  {rest(200);} 
+  {rest(200);}
   shutdown_dialog(player2);
 
   //destroy_bitmap(FilePreview);
@@ -429,7 +376,7 @@
 
 static DIALOG EditCaption [] =  //Array of GUI-dialog elements
 {
- // (proc)        (x)  (y)  (w) (h) (fg) (bg) (key) (flags) (d1) (d2) (dp)           (dp2) (dp3) 
+ // (proc)        (x)  (y)  (w) (h) (fg) (bg) (key) (flags) (d1) (d2) (dp)           (dp2) (dp3)
 //Clear Dialog screen
  { d_shadow_box_proc, GuiSizeX-230, GuiSizeY-100,230, 60,  0,    0,    0,    0,       0,    0,    NULL,             NULL, NULL  },
  { d_edit_proc,       GuiSizeX-220, GuiSizeY-70,   200,  8,    0xFFFFFF,    0x000000,    0,    D_EXIT,       24,   0,    ExeCaption,             NULL, NULL  },
@@ -439,95 +386,28 @@
  { NULL,          0,   0,   0,  0,  0,   0,   0,    0,      0,   0,   NULL,          NULL, NULL }
 };
 
-//--------------------C64 'exe.prg'-export's native displayer code--------------
-unsigned char bmpExe[]=  //generated from ghex's .html output, '0x'-es and ','-s are appended with Geany
-{
-0x01,0x08,0x0b,0x08,0xdc,0x07,0x9e,0x32,0x30,0x36,0x34,0x00,0x00,0x00,0x00,0x00,
-0x00,0x78,0xa9,0x35,0x85,0x01,0xa9,0x03,0x8d,0x00,0xdd,0x8d,0x11,0xd0,0xad,0x28,
-0x2d,0x8d,0x20,0xd0,0x8d,0x21,0xd0,0x8d,0xb0,0x09,0x20,0xbd,0x08,0x20,0x25,0x09,
-0xa9,0x18,0x8d,0x18,0xd0,0xa9,0x3b,0x8d,0x11,0xd0,0xa9,0x08,0x8d,0x16,0xd0,0xad,
-0xd8,0x09,0xf0,0xfb,0xa9,0xf9,0xcd,0x12,0xd0,0xd0,0xfb,0xad,0x11,0xd0,0x09,0x20,
-0x29,0xf7,0x8d,0x11,0xd0,0x29,0xf7,0x8d,0x11,0xd0,0xa9,0xff,0x8d,0x15,0xd0,0xa9,
-0xfa,0xcd,0x12,0xd0,0xd0,0xfb,0xa2,0x09,0xca,0xd0,0xfd,0xad,0x11,0xd0,0x29,0xdf,
-0x8d,0x11,0xd0,0xa9,0x00,0xcd,0x12,0xd0,0xd0,0xfb,0xa9,0x00,0x8d,0x21,0xd0,0xa9,
-0x09,0xcd,0x12,0xd0,0xd0,0xfb,0xea,0xad,0x11,0xd0,0x09,0x08,0x29,0xdf,0x8d,0x11,
-0xd0,0xac,0xb0,0x09,0xa2,0x15,0xca,0xd0,0xfd,0xea,0x8c,0x21,0xd0,0xa9,0x00,0x8d,
-0x15,0xd0,0xad,0x12,0xd0,0xd0,0xfb,0xa9,0x32,0xcd,0x12,0xd0,0xd0,0xfb,0xa2,0x0a,
-0xca,0xd0,0xfd,0xad,0x11,0xd0,0x09,0x28,0x8d,0x11,0xd0,0x4c,0x43,0x08,0xa0,0x00,
-0xb9,0x40,0x29,0x99,0x00,0x04,0xb9,0x40,0x2a,0x99,0x00,0x05,0xb9,0x40,0x2b,0x99,
-0x00,0x06,0xb9,0x40,0x2c,0x99,0x00,0x07,0xc8,0xd0,0xe5,0xa9,0x00,0xa2,0x29,0x85,
-0xfc,0x86,0xfd,0xa9,0x00,0xa2,0x3f,0x85,0xfe,0x86,0xff,0xa0,0x00,0xb1,0xfc,0x91,
-0xfe,0xc8,0xd0,0xf9,0xc6,0xfd,0xc6,0xff,0xa5,0xff,0xc9,0x20,0x10,0xef,0xa2,0x07,
-0x8a,0x0a,0xa8,0xa9,0x01,0x99,0x01,0xd0,0xbd,0x90,0x09,0x99,0x00,0xd0,0xa9,0x0f,
-0x9d,0x27,0xd0,0x8a,0x18,0x69,0x30,0x9d,0xf8,0x07,0xca,0x10,0xe3,0xa9,0x00,0x8d,
-0x10,0xd0,0x8d,0xff,0x3f,0x60,0xa0,0x00,0xa9,0x00,0x99,0x00,0x0c,0x99,0x00,0x0d,
-0xc8,0xd0,0xf5,0xa2,0x00,0x86,0xfa,0xa6,0xfa,0xa9,0x00,0x8d,0x77,0x09,0x8d,0x78,
-0x09,0xbd,0xd8,0x09,0xf0,0x4a,0x0a,0x2e,0x78,0x09,0x0a,0x2e,0x78,0x09,0x0a,0x2e,
-0x78,0x09,0x8d,0x77,0x09,0xad,0x78,0x09,0x18,0x69,0xd8,0x8d,0x78,0x09,0xa9,0x00,
-0x18,0x7d,0x98,0x09,0x85,0xfe,0xa0,0x0c,0xe0,0x0c,0x90,0x01,0xc8,0x84,0xff,0xa9,
-0x33,0x85,0x01,0xa0,0x00,0xa2,0x00,0xbd,0x11,0x11,0x91,0xfe,0xc8,0xc8,0xc8,0xe8,
-0xe0,0x08,0xd0,0xf3,0xa9,0x35,0x85,0x01,0xe6,0xfa,0xa6,0xfa,0xe0,0x18,0xd0,0xa7,
-0x60,0x50,0x68,0x80,0x98,0xb0,0xc8,0xe0,0xf8,0x00,0x01,0x02,0x40,0x41,0x42,0x80,
-0x81,0x82,0xc0,0xc1,0xc2,0x00,0x01,0x02,0x40,0x41,0x42,0x80,0x81,0x82,0xc0,0xc1,
-0xc2,0x00 
-};
-
-unsigned char AFLIexe[]= //generated from ghex's .html output, '0x'-es and ','-s are appended with Geany
-{
-0x01,0x08,0x0b,0x08,0xdc,0x07,0x9e,0x32,0x30,0x36,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x78,
-0xa9,0x35,0x85,0x01,0x20,0x43,0x09,0x20,0xb5,0x09,0xa9,0x2e,0xcd,0x12,0xd0,0xd0,0xfb,0xea,
-0xa9,0x00,0x8d,0x21,0xd0,0xea,0xea,0xea,0xea,0xea,0xa0,0x19,0xa2,0x38,0xa9,0x80,0x8e,0x11,
-0xd0,0x8d,0x18,0xd0,0xee,0x2f,0xd0,0xa9,0x90,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xce,0x2f,
-0xd0,0xa9,0xa0,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xee,0x2f,0xd0,0xa9,0xb0,0xe8,0x8e,0x11,
-0xd0,0x8d,0x18,0xd0,0xce,0x2f,0xd0,0xa9,0xc0,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xee,0x2f,
-0xd0,0xa9,0xd0,0xe8,0x8e,0x11,0xd0,0x8d,0x18,0xd0,0xce,0x2f,0xd0,0xa9,0xe0,0xe8,0x8e,0x11,
-0xd0,0x8d,0x18,0xd0,0xea,0xea,0xea,0xa9,0xf0,0xe8,0x8e,0x11,0xd0,0x9d,0xd9,0xcf,0x88,0x10,
-0x9f,0xa9,0xfa,0xcd,0x12,0xd0,0xd0,0xfb,0xa9,0x17,0x8d,0x11,0xd0,0xa9,0x03,0x8d,0x00,0xdd,
-0xa9,0x00,0x8d,0x17,0xd0,0x8d,0x1c,0xd0,0xa9,0x18,0x8d,0x18,0xd0,0xa2,0x03,0xca,0xd0,0xfd,
-0xad,0x82,0x0a,0x8d,0x21,0xd0,0xa0,0x0f,0xa9,0x01,0x99,0x27,0xd0,0xb9,0x5a,0x0a,0x99,0x00,
-0xd0,0x88,0x10,0xf2,0xa9,0x00,0xcd,0x12,0xd0,0xd0,0xfb,0xa2,0x04,0xca,0xd0,0xfd,0xa9,0x00,
-0x8d,0x21,0xd0,0xa9,0x09,0xcd,0x12,0xd0,0xd0,0xfb,0xea,0xa9,0x18,0x8d,0x11,0xd0,0xac,0x82,
-0x0a,0xa2,0x16,0xca,0xd0,0xfd,0xea,0xea,0x8c,0x21,0xd0,0xe8,0x8e,0x10,0xd0,0xa9,0x40,0x8d,
-0x00,0xd0,0xa9,0x0c,0x8d,0x27,0xd0,0xad,0x12,0xd0,0xd0,0xfb,0xa2,0x00,0x8e,0x15,0xd0,0xa9,
-0x24,0xcd,0x12,0xd0,0xd0,0xfb,0xa9,0x02,0x8d,0x00,0xdd,0xa9,0x80,0x8d,0x18,0xd0,0xa9,0xff,
-0x8d,0x15,0xd0,0xa9,0x6b,0x8d,0x17,0xd0,0x8d,0x1c,0xd0,0xa0,0x0f,0xad,0x83,0x0a,0x99,0x27,
-0xd0,0xb9,0x2b,0x0a,0x99,0x00,0xd0,0x88,0x10,0xf1,0xa9,0x00,0x8d,0x10,0xd0,0x4c,0x1b,0x08,
-0xa0,0x2e,0xb9,0x2b,0x0a,0x99,0x00,0xd0,0x88,0x10,0xf7,0xad,0xe8,0x4a,0x8d,0x20,0xd0,0x8d,
-0x21,0xd0,0x8d,0x82,0x0a,0xad,0xe9,0x4a,0x8d,0x25,0xd0,0xad,0xea,0x4a,0x8d,0x83,0x0a,0xad,
-0xeb,0x4a,0x8d,0x26,0xd0,0xa0,0x00,0xa9,0x00,0xa2,0x4b,0x85,0xfc,0x86,0xfd,0xa9,0x00,0xa2,
-0x80,0x85,0xfe,0x86,0xff,0xa0,0x00,0xb1,0xfc,0x91,0xfe,0xc8,0xd0,0xf9,0xc6,0xfd,0xc6,0xff,
-0xa5,0xff,0xc9,0x40,0x10,0xef,0xa0,0x07,0xa9,0x7d,0x99,0xf8,0x7f,0xa9,0x7e,0x8d,0xfe,0x7f,
-0x88,0x10,0xf3,0xa2,0x07,0x8a,0x18,0x69,0x30,0x9d,0xf8,0x07,0xca,0x10,0xf6,0xa9,0x00,0x8d,
-0xff,0x3f,0x8d,0xff,0x7f,0x60,0xa0,0x00,0xa9,0x00,0x99,0x00,0x0c,0x99,0x00,0x0d,0xc8,0xd0,
-0xf5,0xa2,0x00,0x86,0xfa,0xa6,0xfa,0xa9,0x00,0x8d,0x07,0x0a,0x8d,0x08,0x0a,0xbd,0xd8,0x0a,
-0xf0,0x4a,0x0a,0x2e,0x08,0x0a,0x0a,0x2e,0x08,0x0a,0x0a,0x2e,0x08,0x0a,0x8d,0x07,0x0a,0xad,
-0x08,0x0a,0x18,0x69,0xd8,0x8d,0x08,0x0a,0xa9,0x00,0x18,0x7d,0x6a,0x0a,0x85,0xfe,0xa0,0x0c,
-0xe0,0x0c,0x90,0x01,0xc8,0x84,0xff,0xa9,0x33,0x85,0x01,0xa0,0x00,0xa2,0x00,0xbd,0x11,0x11,
-0x91,0xfe,0xc8,0xc8,0xc8,0xe8,0xe0,0x08,0xd0,0xf3,0xa9,0x35,0x85,0x01,0xe6,0xfa,0xa6,0xfa,
-0xe0,0x18,0xd0,0xa7,0xa0,0x0e,0xb9,0x84,0x0a,0x99,0x21,0x0c,0x88,0x10,0xf7,0x60,0x18,0x84,
-0x18,0x30,0x50,0x01,0x18,0x5a,0x68,0x01,0x18,0xae,0x18,0xd8,0x80,0x01,0x00,0x08,0x2d,0x00,
-0x00,0xff,0x08,0x6b,0x80,0x01,0x01,0xff,0x6b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,
-0x0e,0x01,0x02,0x0f,0x04,0x0f,0x06,0x07,0x0f,0x50,0x01,0x68,0x01,0x80,0x01,0x98,0x01,0xb0,
-0x01,0xc8,0x01,0xe0,0x01,0xf8,0x01,0x00,0x01,0x02,0x40,0x41,0x42,0x80,0x81,0x82,0xc0,0xc1,
-0xc2,0x00,0x01,0x02,0x40,0x41,0x42,0x80,0x81,0x82,0xc0,0xc1,0xc2,0x00,0x00,0x4e,0x7b,0x1a,
-0x9b,0x63,0x19,0x9f,0x7b,0x19,0x9b,0x63,0x19,0x5b,0x63,0xda 
-};
 
 //===================================================Main Function===============================================================
-int main(int argc, char **argv) 
-{	
+int main(int argc, char **argv)
+{
     set_uformat(U_ASCII); //set character encoding to fix sized 8 bit ASCII characters
     //init window
 	if (allegro_init()!= 0) return 1;
 	//alpng_init(); //png-library could be loaded like bmp...didn't work, it terminated the program :(
     LOCK_FUNCTION(CloseButton);
     set_close_button_callback(CloseButton);
-	install_keyboard(); 
+	install_keyboard();
 	install_mouse(); enable_hardware_cursor();
 	install_timer();
     clear_keybuf();
-    
-    get_executable_name(ConfigPath, sizeof(ConfigPath));
+
+	char *tmp_path = getenv("HOME");
+	strcpy(ConfigPath, tmp_path);
+	strcat(ConfigPath, "/.config/");
+	strcpy(SAVEpath, tmp_path);
+	strcat(SAVEpath, "/");
+	strcpy(LOADpath, SAVEpath);
+
     replace_filename(ConfigPath, ConfigPath, ConfigFile, sizeof(ConfigPath));
     if (!exists(ConfigPath))
     { //try to create config file if doesn't exist
@@ -553,11 +433,11 @@
     //for (unsigned int i=0;i<16;i++) {BackPalette[C64Palette[i]]=i;} //copy C64Palette array to Backpalette associative map
 
     //create and adjust GUI
-	set_window_title("HermIRES 1.28 - Hires Bitmap Editor for C64 - Hermit Software Hungary"); 
-    //A: slower, but buttons in Windows7 don't disappear, just their text does sometimes: 
-    set_color_depth(24); //set_color_depth(24);  
-       //B: faster, but Windows freezes s and doesn't always refresh GUI with this (for example, after locking the PC)): 
-       //int depth; if ((depth = desktop_color_depth()) != 0) set_color_depth(depth); 
+	set_window_title("HermIRES 1.28 - Hires Bitmap Editor for C64 - Hermit Software Hungary");
+    //A: slower, but buttons in Windows7 don't disappear, just their text does sometimes:
+    set_color_depth(24); //set_color_depth(24);
+       //B: faster, but Windows freezes s and doesn't always refresh GUI with this (for example, after locking the PC)):
+       //int depth; if ((depth = desktop_color_depth()) != 0) set_color_depth(depth);
     SizeGUI();
     position_mouse_z(MagnifyFactor);
     set_color_conversion(COLORCONV_TOTAL);
@@ -570,13 +450,13 @@
 
     //create dialog
     gui_bg_color = C64Palette[6]; gui_mg_color=C64Palette[3]; gui_fg_color = C64Palette[14];
-    DIALOG_PLAYER *player = init_dialog(HermIRESdialog, -1); 
+    DIALOG_PLAYER *player = init_dialog(HermIRESdialog, -1);
     update_dialog(player);
     show_mouse(screen);
     textprintf_ex(screen,font, TBPosX, HermIRESdialog[17].y+2, 0x80FFFF,GUIbgColor,"Brightness");
     textprintf_ex(screen,font, TBPosX, HermIRESdialog[18].y+2, 0x80FFFF,GUIbgColor,"CRT-smooth");
 
-    LoadPalette(); 
+    LoadPalette();
     if (argc == 2) //checks whether not less/more than one command line option, which should be filename
     {//MIME to path - open the file from command line parameter
      for (int i=0;i < 480;i++) {LOADpath[i] = argv[1][i];}
@@ -586,7 +466,7 @@
     {
      if (exists(SAVEpath)) LoadFile();
     }
-    
+
     CopyCutSelection(); //by default all is selected automatically at startup
 
     BorderDrawer(); GridDrawer(GridCol); PrevDrawer(); PrevText(); DispSelCol(); DispToolBar(); //first display of bitmaps, etc.
@@ -634,14 +514,14 @@
 
  if (ClashTimer<0) { ClashTimer=ClashBlinkSpeed; BlinkOn=1; if(ClashTestMode==1) {DetectClashes();GridDrawer(GridCol);} }
  else if (ClashTimer==ClashBlinkSpeed-(ClashBlinkSpeed/ClashBlinkRatio)) { BlinkOn=0; if(ClashTestMode==1) {DetectClashes();GridDrawer(GridCol);} }
- ClashTimer--; 
+ ClashTimer--;
  FlashingColor = (ClashTimer&16) ? 0xE0E0E0 : 0x101010;
- 
+
  GUIregion=CheckRange();
  if (GUIregion == 0) textprintf_ex(screen,font,TxtInfoPosX, TxtInfoPosY+32,0x80FFFF,0x252a49,(Mag_min>2)?"Pixel   X%.3d    Y%.3d":"Pixel: X%.3d  Y%.3d", GetDataX(), GetDataY());
  else if (GUIregion!=PrevGUIregion) GridBlitter(); //clear the screen from garbage possibly left there
 
- if (ZoomRectColCnt>0) {ZoomRectColCnt--; ZoomRectCol=abs(ZoomRectColCnt-ZoomRectSpeed/2)*8; ZoomRectCol=makecol(ZoomRectCol,ZoomRectCol,ZoomRectCol); ShowZoomLocation(); } 
+ if (ZoomRectColCnt>0) {ZoomRectColCnt--; ZoomRectCol=abs(ZoomRectColCnt-ZoomRectSpeed/2)*8; ZoomRectCol=makecol(ZoomRectCol,ZoomRectCol,ZoomRectCol); ShowZoomLocation(); }
  else ZoomRectColCnt=ZoomRectSpeed;
 
  if ((mouse_b&1 || mouse_b&2) && GUIregion==2)
@@ -666,13 +546,13 @@
      ShapeDrawn=1;ShapeRightButt=0;
      if (MButtBuf != mouse_b) { SelectionStartX=GetDataX(); SelectionStartY=GetDataY(); }
      else { SelectionEndX=GetDataX(); SelectionEndY=GetDataY(); }
-     SelectionPreview(0); 
+     SelectionPreview(0);
      break;
     }
    }
   }
   if ((GUIregion == 1) && (MButtBuf != mouse_b)) //mouse is in the preview area
-  { 
+  {
    if (PreviewZoom==1 && MagnifyFactor>Mag_min)
    {
     GridInPosX=(mouse_x-PreviewPosX)-(GridSizeX/MagnifyFactor)/2; GridInPosY=(mouse_y-PreviewPosY)-(GridSizeY/MagnifyFactor)/2;
@@ -718,7 +598,7 @@
     case 0: {DrawBmpData(GetDataX(),GetDataY(),DrawCol2);break;} //in AFLI-bug area right button always clears
     case 1: case 2: case 3: {ShapeDrawn=1;ShapeRightButt=1; ShapePreview(); break;}
     case 4: {Filler();break;}
-    case 5: 
+    case 5:
     { //clipboard move checking
      ShapeDrawn=1;ShapeRightButt=1;
      if(MButtBuf != mouse_b)
@@ -728,19 +608,19 @@
       DisplayClipBoard();
      }
      else SelectionPreview(1);
-     break; 
+     break;
     }
    }
   }
   else if ((GUIregion == 1) && (MButtBuf != mouse_b)) //the preview area
   {
-   PrevRightClick=1; 
+   PrevRightClick=1;
   }
   else if (GUIregion == 2) //mouse is in the toolbar area
   {
    if (RepeatCounter==0 || (RepeatCounter==RepeatSpeed1-1 && MButtBuf!=mouse_b))
     switch ((mouse_x - TBPosX)/TButtSize)
-    { //repeatable buttons 
+    { //repeatable buttons
      case 2: { //decrease diameter
               if (DrawMode==0) DecPenDiameter();
               else { DrawMode=0; DispToolBar(); GridBlitter(); }
@@ -750,13 +630,13 @@
    if (MButtBuf != mouse_b)
    { //one-shot buttons
     switch ((mouse_x - TBPosX)/TButtSize)
-    { 
+    {
      case 0: F11er();break;
      case 1: F10er(); break;
     }
    }
   }
- } 
+ }
  else if (mouse_b & 4) //middle mouse-button to move zoomed area
  {
   if (GUIregion==0)
@@ -767,7 +647,7 @@
    TempPosX=GetDataX();TempPosY=GetDataY();
    GridDrawer(GridCol); PrevBlitter(); ShowZoomLocation();
   }
- } 
+ }
  else if ( mouse_z != WheelBuf ) //mouse wheel to increase/decrease magnification
  {
   Zoomer();
@@ -782,7 +662,7 @@
     case 1: LineShape(); break;
     case 2: RectDraw(); break;
     case 3: CircleDraw(); break;
-    case 5: 
+    case 5:
     {
      if (!ShapeRightButt) {SelectionEndX=GetDataX(); SelectionEndY=GetDataY(); GridDrawer(GridCol); CopyCutSelection(); }
      else PasteMoveSelection();
@@ -791,7 +671,7 @@
    }
    ShapeRightButt=0;
   }
-  if (DrawMode==5) SelectionPreview(0); 
+  if (DrawMode==5) SelectionPreview(0);
   else PenPreview(); //display pen-diameter if bigger
   RepeatCounter=RepeatSpeed1;
   if (GUIregion == 0) {TempStartX=TempPosX=TempPosX2=GetDataX(); TempStartY=TempPosY=TempPosY2=GetDataY(); mousestartx=mouse_x; mousestarty=mouse_y; }   //temp x and y for starting position or center of line/circle/rect
@@ -806,9 +686,9 @@
 END_OF_FUNCTION(GetControls)
 
 
-void BuffPos() //store the changing mouse-event to detect singleclicks/wheel differences 
+void BuffPos() //store the changing mouse-event to detect singleclicks/wheel differences
      {
-      WheelBuf = mouse_z; MButtBuf = mouse_b; 
+      WheelBuf = mouse_z; MButtBuf = mouse_b;
       mouse_x_buf=mouse_x; mouse_y_buf=mouse_y;
       PrevGUIregion=GUIregion;
      }
@@ -817,7 +697,7 @@
 void ShapePreview()
      {
       if (mouse_x!=mouse_x_buf || mouse_y!=mouse_y_buf || colbuf!=FlashingColor) //draw only when position or colour changes
-      { 
+      {
        if (ShapeDrawn != 0 && GUIregion==0)  //draw shape-preview on screen (in normal resolution)
        {
         GridBlitter();
@@ -825,13 +705,13 @@
         {
          case 1: {fastline(screen,mousestartx,mousestarty,mouse_x,mouse_y,FlashingColor); break;}
          case 2: {rect(screen,mousestartx,mousestarty,mouse_x,mouse_y,FlashingColor); break;}
-         case 3: 
+         case 3:
          {
-          int r= (int)(sqrt(pow(mouse_x-mousestartx,2)+pow(mouse_y-mousestarty,2))); 
+          int r= (int)(sqrt(pow(mouse_x-mousestartx,2)+pow(mouse_y-mousestarty,2)));
           set_clip_rect(screen,GridPosX,GridPosY,GridPosX+GridSizeX-1,GridPosY+GridSizeY-1);
-          circle(screen,mousestartx,mousestarty,r,FlashingColor); 
+          circle(screen,mousestartx,mousestarty,r,FlashingColor);
           set_clip_rect(screen,0,0,GuiSizeX,GuiSizeY);
-          break; 
+          break;
          }
         }
        }
@@ -855,7 +735,7 @@
 void SelectionPreview(int DisplayContent)
      {
       int selX1,selY1,selX2,selY2;
-      if (mouse_x!=mouse_x_buf || mouse_y!=mouse_y_buf || colbuf!=FlashingColor) //draw only when position or colour changes 
+      if (mouse_x!=mouse_x_buf || mouse_y!=mouse_y_buf || colbuf!=FlashingColor) //draw only when position or colour changes
       {
        GridBlitter();
        selX1=GridPosX+GetDataScreenX(SelectionStartX+(SelectionEndX<SelectionStartX));
@@ -874,15 +754,15 @@
      {
       if (MButtBuf == mouse_b)
       {
-       if (x!=TempPosX2 || y!=TempPosY2) 
-       { 
-        DrawBmpLine(TempPosX2,TempPosY2,x,y,col); 
+       if (x!=TempPosX2 || y!=TempPosY2)
+       {
+        DrawBmpLine(TempPosX2,TempPosY2,x,y,col);
         GridDrawer(GridCol);PrevDrawer();
        }
       }
-      else 
+      else
       { //UNDO point
-       StoreUndo(); DrawBmpPixel(x,y,col); GridDrawer(GridCol);PrevDrawer(); 
+       StoreUndo(); DrawBmpPixel(x,y,col); GridDrawer(GridCol);PrevDrawer();
       }
       TempPosX2=x; TempPosY2=y;
      }
@@ -912,9 +792,9 @@
       }
       else  //filled rectangle
       {
-       if ((DitherMode==0 || DrawCol1==DrawCol2) && ClashTestMode<2 ) 
-       { 
-        int zoomtemp = PreviewZoom; PreviewZoom=1;DrawPrv(); 
+       if ((DitherMode==0 || DrawCol1==DrawCol2) && ClashTestMode<2 )
+       {
+        int zoomtemp = PreviewZoom; PreviewZoom=1;DrawPrv();
         rectfill(Preview,TempStartX,TempStartY,maxx,maxy, (ShapeRightButt==0)?C64Palette[DrawCol1]:C64Palette[DrawCol2]);
         ConvBackBMP(Preview); PreviewZoom = zoomtemp;
        }
@@ -930,7 +810,7 @@
           {
            DrawBmpPixel(i,j,(ShapeRightButt==0)?DrawCol1:DrawCol2);
           }
-          //GridDrawer(GridCol); 
+          //GridDrawer(GridCol);
           ShowProgress((i-TempStartX)*100/(maxx-TempStartX));
          }
         }
@@ -942,7 +822,7 @@
           {
            DrawBmpPixel(i,j,(ShapeRightButt==0)?DrawCol1:DrawCol2);
           }
-          //GridDrawer(GridCol); 
+          //GridDrawer(GridCol);
           ShowProgress((i-TempStartX)*100/(maxx-TempStartX));
          }
         }
@@ -954,7 +834,7 @@
           {
            DrawBmpPixel(i,j,(ShapeRightButt==0)?DrawCol1:DrawCol2);
           }
-          //GridDrawer(GridCol); 
+          //GridDrawer(GridCol);
           ShowProgress((i-TempStartX)*100/(maxx-TempStartX));
          }
         }
@@ -966,7 +846,7 @@
           {
            DrawBmpPixel(i,j,(ShapeRightButt==0)?DrawCol1:DrawCol2);
           }
-          //GridDrawer(GridCol); 
+          //GridDrawer(GridCol);
           ShowProgress((i-TempStartX)*100/(maxx-TempStartX));
          }
         }
@@ -988,31 +868,31 @@
      {
       int maxx=GetDataX(), maxy=GetDataY();
       int radius = (int)(sqrt(pow(maxx-TempStartX,2)+pow(maxy-TempStartY,2)));
-      StoreUndo(); //UNDO point 
+      StoreUndo(); //UNDO point
       if (CircFill == 0)
       {
-       if ((DitherMode==0 || DrawCol1==DrawCol2) && PenDiameter<=4 && ClashTestMode<2) 
+       if ((DitherMode==0 || DrawCol1==DrawCol2) && PenDiameter<=4 && ClashTestMode<2)
         {
-         int zoomtemp = PreviewZoom; PreviewZoom=1;DrawPrv(); 
-         circle(Preview,TempStartX,TempStartY,radius,(ShapeRightButt==0)?C64Palette[DrawCol1]:C64Palette[DrawCol2]); 
-         ConvBackBMP(Preview); PreviewZoom = zoomtemp; 
+         int zoomtemp = PreviewZoom; PreviewZoom=1;DrawPrv();
+         circle(Preview,TempStartX,TempStartY,radius,(ShapeRightButt==0)?C64Palette[DrawCol1]:C64Palette[DrawCol2]);
+         ConvBackBMP(Preview); PreviewZoom = zoomtemp;
         }
-       else Circler(TempStartX,TempStartY,radius,(ShapeRightButt==0)?DrawCol1:DrawCol2); 
+       else Circler(TempStartX,TempStartY,radius,(ShapeRightButt==0)?DrawCol1:DrawCol2);
       }
       else //filled circle
       {
-       if ((DitherMode==0 || DrawCol1==DrawCol2) && ClashTestMode<2 ) 
-       { 
-        int zoomtemp = PreviewZoom; PreviewZoom=1;DrawPrv(); 
+       if ((DitherMode==0 || DrawCol1==DrawCol2) && ClashTestMode<2 )
+       {
+        int zoomtemp = PreviewZoom; PreviewZoom=1;DrawPrv();
         circlefill(Preview,TempStartX,TempStartY,radius,(ShapeRightButt==0)?C64Palette[DrawCol1]:C64Palette[DrawCol2]);
-        ConvBackBMP(Preview); PreviewZoom = zoomtemp; 
+        ConvBackBMP(Preview); PreviewZoom = zoomtemp;
        }
        else
        { //pattern / clash-sensitive filled circle
         for (int i = 0; i<radius; i+= PenDiameter/4 )
         {
          Circler(TempStartX,TempStartY,i,(ShapeRightButt==0)?DrawCol1:DrawCol2);
-         //GridDrawer(GridCol); 
+         //GridDrawer(GridCol);
          ShowProgress(i*100/radius);
         }
        }
@@ -1032,7 +912,7 @@
       if (ClashTestMode<2)
       { //normal solid fill
        ConvBackBMP(Preview);
-      } 
+      }
       else
       { // tested &/ pattern-fill
        unsigned char detcol;
@@ -1043,12 +923,12 @@
          detcol = GetMatchCol(getpixel(Preview, i,j));   //detect colour , getr(),getg(),getb() for calculations
          CarefulPixel(i,j,detcol);
         }
-        //GridDrawer(GridCol); 
-        ShowProgress(i*100/FieldSizeX); 
+        //GridDrawer(GridCol);
+        ShowProgress(i*100/FieldSizeX);
        }
       }
       GridDrawer(GridCol);
-      PreviewZoom = zoomtemp; PrevDrawer(); 
+      PreviewZoom = zoomtemp; PrevDrawer();
      }
 
 void DrawBmpLine(int x1, int y1, int x2, int y2, unsigned char col)
@@ -1159,7 +1039,7 @@
         for (int angle = 0; angle < 360; angle += step)
         {
          circorx = x+(int)(sin(angle*rad)*radius/2.23); circory = y+(int)(cos(angle*rad)*radius/2.23);
-         //if (0 <= circorx && circorx < FieldSizeX && 0 <= circory && circory < FieldSizeY) 
+         //if (0 <= circorx && circorx < FieldSizeX && 0 <= circory && circory < FieldSizeY)
          //{
           if (DitherMode==0) CarefulPixel(circorx,circory,colour); //mode 0 - no dither
           else if (DitherMode==1) //mode 1 - dither even
@@ -1214,7 +1094,7 @@
       int x = GetDataX()/ChrSizeX;
       int y = GetDataY()/ChrSizeY;
       ActChar = x + y * NoOfChrX;
-      if (ActChrBuf != ActChar) 
+      if (ActChrBuf != ActChar)
       {
        textprintf_ex(screen,font,TxtInfoPosX,TxtInfoPosY+42,0x80FFFF,0x252a49,(Mag_min>2)?"Char  X%.2d Y%.2d Memo:$%.3X":"ChX%.2d-Y%.2d Mem$%.3X", x, y, ActChar);
        if (PreviewZoom != 1) PrevDrawer();
@@ -1224,11 +1104,11 @@
 
 int CheckRange() //checks whether the mouse is in the gridfield/datafield - avoid border-effects
     {            //also checks whether the mouse is in the preview-screen or not
-     if ((GridPosX < mouse_x) && (mouse_x < GridPosX+GridSizeX) && (GridPosY < mouse_y) && (mouse_y < GridPosY+GridSizeY) && 
+     if ((GridPosX < mouse_x) && (mouse_x < GridPosX+GridSizeX) && (GridPosY < mouse_y) && (mouse_y < GridPosY+GridSizeY) &&
          (mouse_x < GridPosX+(FieldSizeX-GridInPosX)*MagnifyFactor) && (mouse_y < GridPosY+(FieldSizeY-GridInPosY)*MagnifyFactor)) return 0;
-     if ((PreviewPosX <mouse_x) && (mouse_x < (PreviewPosX+FieldSizeX)) && 
+     if ((PreviewPosX <mouse_x) && (mouse_x < (PreviewPosX+FieldSizeX)) &&
         (PreviewPosY < mouse_y) && (mouse_y < (PreviewPosY+FieldSizeY))) return 1;
-     if ((TBPosX <mouse_x) && (mouse_x < (TBPosX+TBSizeX)) && 
+     if ((TBPosX <mouse_x) && (mouse_x < (TBPosX+TBSizeX)) &&
         (TBPosY < mouse_y) && (mouse_y < (TBPosY+TBSizeY))) return 2;
      return -1;
     }
@@ -1266,11 +1146,11 @@
 unsigned int ClashCol (unsigned int col)
 {
  int r=(int)(getr(col)*GridBrightness), g=(int)(getg(col)*GridBrightness), b=(int)(getb(col)*GridBrightness);
- if (BlinkOn) 
- { 
-  r=(r+BlinkStrength*2>=255) ? r-(int)(BlinkStrength*GridBrightness*2) : r+BlinkStrength*2; 
-  g=(g+BlinkStrength>=255) ? g-(int)(BlinkStrength*GridBrightness) : g+BlinkStrength; 
-  b=(b+BlinkStrength>=255) ? b-(int)(BlinkStrength*GridBrightness) : b+BlinkStrength; 
+ if (BlinkOn)
+ {
+  r=(r+BlinkStrength*2>=255) ? r-(int)(BlinkStrength*GridBrightness*2) : r+BlinkStrength*2;
+  g=(g+BlinkStrength>=255) ? g-(int)(BlinkStrength*GridBrightness) : g+BlinkStrength;
+  b=(b+BlinkStrength>=255) ? b-(int)(BlinkStrength*GridBrightness) : b+BlinkStrength;
  }
  if (r<0) r=0; if(g<0) g=0; if(b<0) b=0;
  if (r>255) r=255; if(g>255) g=255; if(b>255) b=255;
@@ -1286,12 +1166,12 @@
 
 void BmpDrawer() //draws the magnified Bitmap
      {
-      int bolder=(MagnifyFactor>Grid_treshold && GridMode && (!CRTmode||MagnifyFactor>CRTemu_treshold) ) ? 1 : 0; 
-      int X,Y,Col, XpixPos, YpixPos, ChrLine; 
+      int bolder=(MagnifyFactor>Grid_treshold && GridMode && (!CRTmode||MagnifyFactor>CRTemu_treshold) ) ? 1 : 0;
+      int X,Y,Col, XpixPos, YpixPos, ChrLine;
       int CRTpixYsize=(int)((MagnifyFactor)*0.8), CRTblur1x=(int)ceil(MagnifyFactor/2.00); //, CRTblur2x=(int)ceil(MagnifyFactor/3.00*2);
       int Xmax=GridSizeX/MagnifyFactor+1, Ymax=GridSizeY/MagnifyFactor+1, fieldXmax=(FieldSizeX-GridInPosX+1), fieldYmax=(FieldSizeY-GridInPosY+1);
-      int pixtop, pixbottom, CRTpixbottom; 
-      float BlurRatio=(PALblur/2)/256.00, BlurRatioN=1-(PALblur/2)/256.00; 
+      int pixtop, pixbottom, CRTpixbottom;
+      float BlurRatio=(PALblur/2)/256.00, BlurRatioN=1-(PALblur/2)/256.00;
       unsigned int prevCol, midCol, nextCol, RprevCol,GprevCol,BprevCol, RmidCol,GmidCol,BmidCol, RnextCol,GnextCol,BnextCol, BlurCol1,BlurCol2;
       bool CRTenabled=((CRTmode==2 || CRTmode==3) && MagnifyFactor<=CRTemu_treshold);
 
@@ -1303,8 +1183,8 @@
         ChrLine=(AFLImode) ? (Y+GridInPosY)%ChrSizeY : 0; //not checking all ClashCnt 2d-array entries for clash in normal bmp-mode
         for (X = 0; X<Xmax && X<fieldXmax; X++)
         {
-         XpixPos=X*MagnifyFactor; 
-         if (AFLImode && (X+GridInPosX)<24) 
+         XpixPos=X*MagnifyFactor;
+         if (AFLImode && (X+GridInPosX)<24)
          { //dipslay AFLI-bug colours as they'll appear on C64
 	      if (BmpData[X+GridInPosX][Y+GridInPosY]==0xF) Col=0xF;
           else if ((X+GridInPosX)<8) Col=FLIbugCol1; else if ((X+GridInPosX)>=16) Col=FLIbugCol3; else Col=FLIbugCol2;
@@ -1312,18 +1192,18 @@
 	     else Col=BmpData[X+GridInPosX][Y+GridInPosY]; //normal colours
          if (   ClashTestMode==1 && ClashCnt[ (X+GridInPosX)/ChrSizeX+((Y+GridInPosY)/ChrSizeY)*NoOfChrX ][ChrLine] > 2   )
          {
-          rectfill(DrawGrid, XpixPos, pixtop, XpixPos+MagnifyFactor-1, pixbottom, ClashCol(C64Palette[Col]) );    
+          rectfill(DrawGrid, XpixPos, pixtop, XpixPos+MagnifyFactor-1, pixbottom, ClashCol(C64Palette[Col]) );
           if (BlinkOn || !GridMode) rect(DrawGrid, XpixPos, YpixPos, XpixPos+MagnifyFactor, YpixPos+MagnifyFactor, 0x804020);
          }
          else
          {
-          rectfill(DrawGrid, XpixPos, pixtop, 
+          rectfill(DrawGrid, XpixPos, pixtop,
           XpixPos+MagnifyFactor-1, pixbottom, BrightComp(C64Palette[Col]) );
          }
         }
        }
       }
-      else 
+      else
       { //CRT emulated pixel drawing
        for (Y = 0;Y<Ymax && Y<fieldYmax; Y++)
        {
@@ -1334,12 +1214,12 @@
          XpixPos=X*MagnifyFactor; Col=BmpData[X+GridInPosX][Y+GridInPosY];
          if (   ClashTestMode==1 && ClashCnt[ (X+GridInPosX)/ChrSizeX+((Y+GridInPosY)/ChrSizeY)*NoOfChrX ][ChrLine] > 2   )
          {
-          rectfill(DrawGrid, XpixPos, pixtop, XpixPos+MagnifyFactor-1, pixbottom, ClashCol(C64Palette[Col]) );    
+          rectfill(DrawGrid, XpixPos, pixtop, XpixPos+MagnifyFactor-1, pixbottom, ClashCol(C64Palette[Col]) );
           if (BlinkOn || !GridMode) rect(DrawGrid, XpixPos, YpixPos, XpixPos+MagnifyFactor, YpixPos+MagnifyFactor, 0x804020);
          }
          else
          {
-          midCol=BrightComp(C64Palette[Col]); 
+          midCol=BrightComp(C64Palette[Col]);
           nextCol=C64Palette[ BmpData[X+GridInPosX+1][Y+GridInPosY] ];
           RmidCol=(unsigned int)(midCol*BlurRatioN); GmidCol=(unsigned int)((midCol&0xFF00)*BlurRatioN); BmidCol=(unsigned int)((midCol&0xFF)*BlurRatioN);
           RprevCol=(unsigned int)(prevCol*BlurRatio); GprevCol=(unsigned int)((prevCol&0xFF00)*BlurRatio); BprevCol=(unsigned int)((prevCol&0xFF)*BlurRatio);
@@ -1391,12 +1271,12 @@
        for(int i=0,j=0; i<(GridHeight+1); i+=MagnifyFactor,j++)
        { //draw horizontal grid-lines
         if ((j+GridInPosY)%ChrSizeY) {if (MagnifyFactor>Grid_treshold && GridMode==1) fastline(Bitmap,0,i,GridWidth,i,GridCol);}
-        else 
+        else
         {
-		 if (AFLImode) 
+		 if (AFLImode)
 		 {
 		  fastline(Bitmap,0,i,GridWidth,i,ChrRangeCol*0.75);
-		  if (GridInPosX<24) fastline(Bitmap,0,i,(24-GridInPosX)*MagnifyFactor,i,0x000000); 
+		  if (GridInPosX<24) fastline(Bitmap,0,i,(24-GridInPosX)*MagnifyFactor,i,0x000000);
 		 }
          else fastline(Bitmap,0,i,GridWidth,i,ChrRangeCol);
         }
@@ -1405,7 +1285,7 @@
        { //draw vertical grid-lines, i counts coordinate, j counts data
         if ((j+GridInPosX)%ChrSizeX) {if (MagnifyFactor>Grid_treshold && GridMode==1) fastline(Bitmap,i,0,i,GridHeight,GridCol);}
         else
-        { 
+        {
          if (AFLImode && (i+GridInPosX*MagnifyFactor)<24*MagnifyFactor) fastline(Bitmap,i,0,i,GridHeight,0x000000);
          else fastline(Bitmap,i,0,i,GridHeight,ChrRangeCol);
         }
@@ -1423,7 +1303,7 @@
       if (Displaying==true) return; //don't start other thread if drawing not yet done
       Displaying=true;
       int i,j,posY;
-      GridBrightness=(GridMode==1 && EnableBriGrid && (MagnifyFactor>Grid_treshold) ) ? (float)MagnifyFactor/(float)(MagnifyFactor-1) : 1.00; 
+      GridBrightness=(GridMode==1 && EnableBriGrid && (MagnifyFactor>Grid_treshold) ) ? (float)MagnifyFactor/(float)(MagnifyFactor-1) : 1.00;
       BmpDrawer();
       drawing_mode(DRAW_MODE_TRANS, NULL, 0, 0);
       if(Brightness>128) { set_trans_blender(0,0,0,Brightness-128); rectfill(DrawGrid,0,0,GridSizeX,GridSizeY,0xFFFFFF); }
@@ -1454,7 +1334,7 @@
        for (int j = 0;j<FieldSizeY;j++)
        {
         ZoomCordX = i/PreviewZoom+PrevStartX ; ZoomCordY = j/PreviewZoom+PrevStartY ;
-        if (AFLImode && ZoomCordX<24) 
+        if (AFLImode && ZoomCordX<24)
         { //dipslay AFLI-bug colours as they'll appear on C64
 	     if (BmpData[ZoomCordX][ZoomCordY]==0xF) ZoomPixCol=0xF;
          else if (ZoomCordX<8) ZoomPixCol=FLIbugCol1; else if (ZoomCordX>=16) ZoomPixCol=FLIbugCol3; else ZoomPixCol=FLIbugCol2;
@@ -1472,10 +1352,10 @@
 
 void ShowZoomLocation()
      {
-      if (MagnifyFactor>Mag_min) 
+      if (MagnifyFactor>Mag_min)
       { //display selection-rectangle
        set_clip_rect(screen,PreviewPosX,PreviewPosY,PreviewPosX+FieldSizeX-1,PreviewPosY+FieldSizeY-1);
-       rect(screen, PreviewPosX+(GridInPosX-PrevStartX)*PreviewZoom, PreviewPosY+(GridInPosY-PrevStartY)*PreviewZoom, 
+       rect(screen, PreviewPosX+(GridInPosX-PrevStartX)*PreviewZoom, PreviewPosY+(GridInPosY-PrevStartY)*PreviewZoom,
         PreviewPosX+(GridInPosX-PrevStartX+GridSizeX/MagnifyFactor)*PreviewZoom, PreviewPosY+(GridInPosY-PrevStartY+GridSizeY/MagnifyFactor)*PreviewZoom,ZoomRectCol);
        set_clip_rect(screen,0,0,GuiSizeX-1,GuiSizeY-1);
       }
@@ -1508,7 +1388,7 @@
       }
       if(Brightness>128) { set_trans_blender(0,0,0,Brightness-128); rectfill(CRTpreview,0,0,FieldSizeX,FieldSizeY,0xFFFFFF); }
       else if (Brightness<128) { set_trans_blender(0,0,0,127-Brightness); rectfill(CRTpreview,0,0,FieldSizeX,FieldSizeY,0); }
-      solid_mode(); 
+      solid_mode();
       PrevBlitter(); ShowZoomLocation();
      }
 
@@ -1521,7 +1401,7 @@
       if (Dither2Col == 1) rectfill(ToolBar,TButtSize+8,8,TButtSize+16,16,TBSelCol);
       if (DitherMode == 0) rectfill(ToolBar,TButtSize+8,8,TButtSize+14,14,TBFGCol); //button 1 - dithermode
       else if (DitherMode == 1) {rectfill(ToolBar,TButtSize+8,8,TButtSize+11,11,TBFGCol);rectfill(ToolBar,TButtSize+12,12,TButtSize+15,15,TBFGCol);}
-      else if (DitherMode == 2) {rectfill(ToolBar,TButtSize+12,8,TButtSize+15,11,TBFGCol);rectfill(ToolBar,TButtSize+8,12,TButtSize+11,15,TBFGCol);}                            
+      else if (DitherMode == 2) {rectfill(ToolBar,TButtSize+12,8,TButtSize+15,11,TBFGCol);rectfill(ToolBar,TButtSize+8,12,TButtSize+11,15,TBFGCol);}
       circlefill(ToolBar,(int)(TButtSize*2.5),TButtSize/2,PenDiameter/4,(DrawMode==0)?TBSelCol:TBFGCol); //button 2 - dot mode (0)
       fastline(ToolBar,TButtSize*3+5,5,TButtSize*4-5,TBSizeY-5,(DrawMode==1)?TBSelCol:TBFGCol); //button 3 - line mode (1)
       if (RectFill == 0) rect(ToolBar,TButtSize*4+5,5,TButtSize*5-5,TBSizeY-5,(DrawMode==2)?TBSelCol:TBFGCol); //button 4 - rectangle modes (2)
@@ -1545,7 +1425,7 @@
         else BmpData[i][j] = (i>=FieldSizeX || j>=FieldSizeY) ? 0: (AFLImode&&i<24)?0xF:DrawCol2; //16;
        }
       }
-      for (int i=0; i<1040; i++) 
+      for (int i=0; i<1040; i++)
       {
 	   for (int j=0; j<8; j++) ClashCnt[i][j]=0;
       }
@@ -1654,7 +1534,7 @@
 int ChangeFullCol()
     {
      //UNDO POINT
-     StoreUndo();     
+     StoreUndo();
      for (int i=0;i<FieldSizeX;i++)
      {
       for (int j=0;j<FieldSizeY;j++)
@@ -1669,7 +1549,7 @@
      remove_timer();
      if (RButt==2 || (key_shifts & KB_ALT_FLAG)) //middle button? Alt pressed with number-keys?
      { //select Border-colour
-       BorderCol=SelCol;BorderDrawer();GridDrawer(GridCol);PrevDrawer();DispSelCol(); 
+       BorderCol=SelCol;BorderDrawer();GridDrawer(GridCol);PrevDrawer();DispSelCol();
      }
      else if (RButt==1) { DrawCol2=SelCol;DispSelCol(); }
      else if (key_shifts & KB_CTRL_FLAG) {ChangeFullCol();GridDrawer(GridCol);PrevDrawer();DrawCol1=SelCol;DispSelCol();} //change a colour entirely
@@ -1726,7 +1606,7 @@
 //-------------------------------------------------------------------------------------------------------------
 int SelChrPosX(int Chrnum)
   {
-   return (Chrnum - (int)(Chrnum/NoOfChrX)*NoOfChrX ) * ChrSizeX; 
+   return (Chrnum - (int)(Chrnum/NoOfChrX)*NoOfChrX ) * ChrSizeX;
   }
 
 int SelChrPosY(int Chrnum)
@@ -1770,9 +1650,9 @@
    }
   }
   position_mouse_z(WheelBuf); Zoomer();
-  SetTimer();  
+  SetTimer();
   return D_O_K;
- } 
+ }
 
 int PickColor1()
 {
@@ -1826,7 +1706,7 @@
 void SetBlockCol(int colour)
  {
   int ipos = SelChrPosX(ActChar), jpos = SelChrPosY(ActChar);
-  
+
   if (AFLImode && ipos<24)
   { //change FLI-bug column colour
    if (ipos<8) FLIbugCol1=colour; else if (ipos>=16) FLIbugCol3=colour; else FLIbugCol2=colour;
@@ -1842,7 +1722,7 @@
   GridDrawer(GridCol);PrevDrawer();
  }
 
-int CopyChar()    //copies current Char to buffer 
+int CopyChar()    //copies current Char to buffer
  {
   remove_timer();
   int ipos = SelChrPosX(ActChar), jpos = SelChrPosY(ActChar);
@@ -1857,13 +1737,13 @@
   return D_O_K;
  }
 
-int Paster()    //copies current Char to buffer 
+int Paster()    //copies current Char to buffer
  {
   if (key_shifts & KB_CTRL_FLAG)
   {
    int ipos = SelChrPosX(ActChar), jpos = SelChrPosY(ActChar), IsNeeded=0;
    for (int i=ipos; i<(ipos+ChrSizeX); i++)
-   { for (int j=jpos; j<(jpos+ChrSizeY); j++) 
+   { for (int j=jpos; j<(jpos+ChrSizeY); j++)
     { if (BmpData[i][j]!=CopyBuffer[(i-ipos)][(j-jpos)]) IsNeeded++; }  //test, if anything to do at all..
    }
    if (IsNeeded==0) return D_O_K;
@@ -1985,7 +1865,7 @@
     {
       if ((SelectionStartX <= SelectionEndX) && (SelectionStartY <= SelectionEndY))
       {
-       if(SelectionStartX<=GetDataX() && GetDataX()<=SelectionEndX && SelectionStartY<=GetDataY() && GetDataY()<=SelectionEndY) 
+       if(SelectionStartX<=GetDataX() && GetDataX()<=SelectionEndX && SelectionStartY<=GetDataY() && GetDataY()<=SelectionEndY)
         { CursorInSelX=(GetDataX()-SelectionStartX); CursorInSelY=(GetDataY()-SelectionStartY); }
        else {CursorInSelX=CursorInSelY=-1; return -1;}
       }
@@ -2043,7 +1923,7 @@
       }
       else if ((SelectionStartX <= SelectionEndX) && (SelectionStartY > SelectionEndY))
       {
-       for (int i=SelectionStartX;i<=SelectionEndX&&i<FieldSizeX;i++,ClipBoardSizeX++) 
+       for (int i=SelectionStartX;i<=SelectionEndX&&i<FieldSizeX;i++,ClipBoardSizeX++)
        {
         ClipBoardSizeY=0; //init
         for (int j=SelectionStartY;j>=SelectionEndY&&j>=0;j--,ClipBoardSizeY++)
@@ -2055,10 +1935,10 @@
       }
       else
       {
-       for (int i=SelectionStartX;i>=SelectionEndX&&i>=0;i--,ClipBoardSizeX++) 
+       for (int i=SelectionStartX;i>=SelectionEndX&&i>=0;i--,ClipBoardSizeX++)
        {
         ClipBoardSizeY=0; //init
-        for (int j=SelectionStartY;j>=SelectionEndY&&j>=0;j--,ClipBoardSizeY++) 
+        for (int j=SelectionStartY;j>=SelectionEndY&&j>=0;j--,ClipBoardSizeY++)
         {
          BmpClipBoard[SelectionStartX-i][SelectionStartY-j]=BmpData[i][j];
          if(key_shifts&KB_SHIFT_FLAG) BmpData[i][j]=DrawCol2; //cut and copy
@@ -2073,12 +1953,12 @@
     { //paste selection to the position where right mouse-button is released
      int PastePosX=GetDataX(), PastePosY=GetDataY();
      int StartX=0, StartY=0, pixX, pixY;
-     if (CursorInSelX!=-1 && CursorInSelY!=-1) 
+     if (CursorInSelX!=-1 && CursorInSelY!=-1)
      {
       PastePosX-=CursorInSelX;
-      if (PastePosX<0) { StartX=abs(PastePosX); PastePosX=0;} 
+      if (PastePosX<0) { StartX=abs(PastePosX); PastePosX=0;}
       PastePosY-=CursorInSelY;
-      if (PastePosY<0) { StartY=abs(PastePosY); PastePosY=0;} 
+      if (PastePosY<0) { StartY=abs(PastePosY); PastePosY=0;}
      }
      if (PastePosX<0 || PastePosY<0) return; //to be on the safe side
      if(!MovingSelectiON) StoreUndo(); //UNDO point
@@ -2112,9 +1992,9 @@
        for (int j=StartY;(j<ClipBoardSizeY)&&(PastePosY+j<FieldSizeY);j++)
        {
         pixY=j+PastePosY-StartY;
-        CarefulPixel(pixX,pixY,BmpClipBoard[i][j]); 
+        CarefulPixel(pixX,pixY,BmpClipBoard[i][j]);
        }
-       ShowProgress((i-StartX)*100/(ClipBoardSizeX-StartX)); 
+       ShowProgress((i-StartX)*100/(ClipBoardSizeX-StartX));
       }
       GridDrawer(GridCol);
      }
@@ -2123,12 +2003,12 @@
 
 void DisplayClipBoard()
      {
-      int GridMpX=mouse_x-GridPosX-1, GridMpY=mouse_y-GridPosY-1; 
+      int GridMpX=mouse_x-GridPosX-1, GridMpY=mouse_y-GridPosY-1;
       int disposX=GridMpX-(GridMpX % MagnifyFactor), disposY= GridMpY-(GridMpY % MagnifyFactor), pixX, pixY;
       int startX=0,startY=0;
-      if (CursorInSelX!=-1 && CursorInSelY!=-1) 
+      if (CursorInSelX!=-1 && CursorInSelY!=-1)
       {
-       disposX-=CursorInSelX*MagnifyFactor; 
+       disposX-=CursorInSelX*MagnifyFactor;
        if (disposX<0) {startX=abs(disposX)/MagnifyFactor;disposX=0;}
        disposY-=CursorInSelY*MagnifyFactor;
        if (disposY<0) {startY=abs(disposY)/MagnifyFactor;disposY=0;}
@@ -2170,23 +2050,23 @@
      alert("mouse->left:draw, right:rubber, middle:move, scroll:zoom",
            "0..9 A..F - select drawcolour, with SHIFT - drawcolour 2",
            "SPACE-zoomswitch, F1..F4-pendiameter, F5..F8-drawingmode",
-           "Check out the README.txt for more details!", 0, 0, 0); 
+           "Check out the README.txt for more details!", 0, 0, 0);
      SetTimer();
      return (D_REDRAWME|D_WANTFOCUS);
     }
 
 //--------------------------------------FILE OPERATIONS----------------------------------
-void LoadPrg(char *filepath)   //write a new binary file with the graphic-data  
+void LoadPrg(char *filepath)   //write a new binary file with the graphic-data
      {
       int i,j,xrough,yrough,yfine, prgaddr=0; //counts the read Chars, whenever reaches max., protects the loader
-      InitBmp();   
+      InitBmp();
       PACKFILE *PRGFile = pack_fopen(filepath,"r");
       pack_fread(&prgaddr,2,PRGFile); //copy the unneeded loadaddress to a yet unused space, will be overwritten soon
       if (file_size_ex(filepath)<10000) //if bigger than 10kbyte, it's AFLI
       { //load normal hires prg content
        if (prgaddr==0x801) pack_fseek(PRGFile,EXEdataAdd-BASICstartAdd);
-       pack_fread(&C64bmp,0x1F40,PRGFile); //read bitmap 
-       for (i=0;i<0x03E8;i++) ColorMap[i][0]=pack_getc(PRGFile);  //pack_fread(&ColorMap,0x03E8,PRGFile);  
+       pack_fread(&C64bmp,0x1F40,PRGFile); //read bitmap
+       for (i=0;i<0x03E8;i++) ColorMap[i][0]=pack_getc(PRGFile);  //pack_fread(&ColorMap,0x03E8,PRGFile);
        pack_fread(&BorderCol,1,PRGFile);
        for (i=0;i<0x1F40;i++)
        {
@@ -2200,10 +2080,10 @@
       else
       { //load AFLI prg content
        if (prgaddr==0x801) pack_fseek(PRGFile,AFLIEXEdataAdd-BASICstartAdd);
-       pack_fread(&C64bmp,0x1F40,PRGFile); //read bitmap 
+       pack_fread(&C64bmp,0x1F40,PRGFile); //read bitmap
 	   for (i=0;i<0x2000-0x1f40;i++) pack_getc(PRGFile);
 	   for (i=0;i<7;i++) { for(j=0;j<1000;j++) ColorMap[j][i]=pack_getc(PRGFile); for(j=0;j<24;j++) pack_getc(PRGFile); }
-	   for(j=0;j<1000;j++) ColorMap[j][7]=pack_getc(PRGFile); 
+	   for(j=0;j<1000;j++) ColorMap[j][7]=pack_getc(PRGFile);
 	   pack_fread(&BorderCol,1,PRGFile);
 	   pack_fread(&FLIbugCol1,sizeof(unsigned char),PRGFile);
        pack_fread(&FLIbugCol2,sizeof(unsigned char),PRGFile);
@@ -2218,7 +2098,7 @@
        }
       }
       pack_fclose(PRGFile);
-     } 
+     }
 
 int Load()   //.prg or .hbm (.bmp/png ?) loader
     {
@@ -2260,7 +2140,7 @@
         { //look for 1st digit at the beginning of row...
          HexValue=-1;
          while ( (ChRead=pack_getc(VPLfile))!=EOF && ChRead!='\n') ; //look for new line
-         ChRead=pack_getc(VPLfile); HexValue=HexStrToInt(ChRead); 
+         ChRead=pack_getc(VPLfile); HexValue=HexStrToInt(ChRead);
          if (HexValue!=-1) break;
         }
         Red = HexValue*16+HexStrToInt(pack_getc(VPLfile)); pack_getc(VPLfile);
@@ -2300,7 +2180,7 @@
        textprintf_ex(screen,font,GridSizeX/2-120, GridSizeY/2,0xFFFFC0,0x000000," *** LOADING IN PROGRESS *** ");
 
        if (ustrcmp(get_extension(LOADpath),"hbm") == 0)
-       { 
+       {
         PACKFILE *HBMfile = pack_fopen(LOADpath,"rp"); //read packed hbm
         pack_fread(&BorderCol,sizeof(unsigned char),HBMfile);
         for(i=0;i<FieldSizeX;i++) pack_fread(&BmpData[i][0],FieldSizeY,HBMfile);
@@ -2336,8 +2216,8 @@
         {
          detcol = GetMatchCol(getpixel(bitmap, i,j));   //detect colour , getr(),getg(),getb() for calculations
          BmpData[i][j] = detcol;
-        } 
-        //ShowProgress(i*100/FieldSizeX); 
+        }
+        //ShowProgress(i*100/FieldSizeX);
        }
       }
       else
@@ -2351,15 +2231,15 @@
          detcol = GetMatchCol(getpixel(bitmap, i,j));   //detect colour , getr(),getg(),getb() for calculations
          CarefulPixel(i,j,detcol);
         }
-        //ShowProgress(i*100/FieldSizeX);  
+        //ShowProgress(i*100/FieldSizeX);
        }
        ClashTestMode=clashmtemp;
       }
      }
 
-void LoadBMP()  //loading and converting (cut/stertch/colour) the BMP file to BmpData 
+void LoadBMP()  //loading and converting (cut/stertch/colour) the BMP file to BmpData
      {
-      BITMAP *ImportBMP; 
+      BITMAP *ImportBMP;
       ImportBMP = load_bmp(LOADpath,BMPalette);
       rectfill(screen,GridSizeX/2-160, GridSizeY/2-40,GridSizeX/2+160, GridSizeY/2+50,0x000032);
       textprintf_ex(screen,font,GridSizeX/2-160, GridSizeY/2,0xFFFFC0,0x000000," *** PICTURE CONVERSION IN PROGRESS *** ");
@@ -2368,9 +2248,9 @@
       BorderCol=DefaultBorderCol; BorderDrawer();
      }
 
-void LoadPNG()  //loading and converting (cut/stertch/colour) the PNG file to BmpData 
+void LoadPNG()  //loading and converting (cut/stertch/colour) the PNG file to BmpData
      {
-      BITMAP *ImportBMP; 
+      BITMAP *ImportBMP;
       ImportBMP = load_png(LOADpath,BMPalette);
       rectfill(screen,GridSizeX/2-160, GridSizeY/2-40,GridSizeX/2+160, GridSizeY/2+50,0x000032);
       textprintf_ex(screen,font,GridSizeX/2-160, GridSizeY/2,0xFFFFC0,0x000000," *** PICTURE CONVERSION IN PROGRESS *** ");
@@ -2391,7 +2271,7 @@
           bdelta = abs(getb(C64Palette[i])-blue);
           sumerrors[i]=rdelta+gdelta+bdelta;
           if (sumerrors[i] < mintemp) {mintemp=sumerrors[i];resultcol=i;}
-         }        
+         }
          return resultcol;
         }
 
@@ -2399,7 +2279,7 @@
 
 void SaveHBM(char *filepath)
       {
-       //write a new packed file with the graphic-data  
+       //write a new packed file with the graphic-data
         PACKFILE *HBMfile = pack_fopen(filepath,"wp");
         pack_fwrite(&BorderCol,sizeof(unsigned char),HBMfile);
         for(int i=0;i<FieldSizeX;i++) pack_fwrite(&BmpData[i][0],FieldSizeY,HBMfile);
@@ -2460,7 +2340,7 @@
                         }                                              //in the upper nybble of the colourbyte
       }
       ClashCnt[Charnum][0]=colindex; //register clash/colourcount
-      if (colindex==1 && ConvChr[0][8][0]==BmpData[0][0]) {ConvChr[1][8][0]=ConvChr[0][8][0]; for (k=0;k<8;k++) ConvChr[0][k][0]=0; } //if only one colour used, it should be 
+      if (colindex==1 && ConvChr[0][8][0]==BmpData[0][0]) {ConvChr[1][8][0]=ConvChr[0][8][0]; for (k=0;k<8;k++) ConvChr[0][k][0]=0; } //if only one colour used, it should be
       //else if (colindex==1 && ConvChr[1][8]==BmpData[0][0]) {ConvChr[0][8]=ConvChr[1][8]; for (k=0;k<8;k++) ConvChr[0][k]=0xFF; }
       ColorMap[Charnum][0]=ConvChr[0][8][0]*16+ConvChr[1][8][0];
       return colindex; //returns number of used layers (colours)
@@ -2469,7 +2349,7 @@
 int ConvertSlice(int x, int y) //for AFLI mode
 	{
 		int colindex = 0, coltest, ipos=x-x%ChrSizeX, Chrx, bytepos, mempos=y%ChrSizeY;
-		
+
 		if (x<24) //FLI-bug area is handled differently, everything what is not colour 0xF is considered the same
 		{
 		 ConvChr[1][mempos][0]=0; //0b00000000;
@@ -2477,14 +2357,14 @@
 		 { Chrx= i-ipos; bytepos = Chrx-(Chrx/8)*8;
 		  if (BmpData[i][y]==0xF) ConvChr[0][mempos][0] |= pow2[bytepos];
 		  else ConvChr[0][mempos][0] &= 255-pow2[bytepos];
-		  ConvChr[0][8][mempos]=0xF; 
+		  ConvChr[0][8][mempos]=0xF;
 		  if (x<8) ConvChr[1][8][mempos]=FLIbugCol1; else if (x>=16) ConvChr[1][8][mempos]=FLIbugCol3; else ConvChr[1][8][mempos]=FLIbugCol2;
 	     }
 		 return 0; //no colour-clash to report in this case
 		}
-		
+
 	    for (int colour=0; colour <= 15; colour++)
-        { 
+        {
 		 coltest=0; //counts, how much times the currently tested colour appeared
          for (int i=ipos; i<(ipos+ChrSizeX); i++)
          {
@@ -2502,7 +2382,7 @@
 	     if (coltest > 0) {                      //if the colour occured, goes to next Char-layer
                            ConvChr[colindex][8][mempos]= colour; //and store the current colour to Char layer's 8th position
                            colindex++;                                   //and even stored the index of the overlay Char
-                          }             
+                          }
 	    }
         return colindex; //returns number of used layers (colours) in the AFLI 8x1 slice
 	}
@@ -2520,7 +2400,7 @@
 void DetectClashes()
      {
       if (AFLImode==false) { for (int i=0 ; i<NoOfChrX*NoOfChrY ; i++) ConvertChr(i); }
-      else 
+      else
       { //AFLI-mode clash-detection of the whole picture:
 	   for (int i=0 ; i<NoOfChrX*NoOfChrY ; i++) ConvertAFLIchr(i); //converts and makes the clash-testing
 	  }
@@ -2528,7 +2408,7 @@
 
 void SaveCaption(PACKFILE *PRGFile)
 	{
-	   int j, i=0,titlend=0; 
+	   int j, i=0,titlend=0;
 	   if (strlen(ExeCaption)<24) for(;i<(24-strlen(ExeCaption))/2;i++) pack_putc( (strlen(ExeCaption))?0x20:0 ,PRGFile);
        for (j=0 ;i<40;i++,j++) //pack_fwrite(&filename,5,PRGFile);
        {
@@ -2541,16 +2421,16 @@
 void SaveAFLIdata (PACKFILE *PRGFile)
 	{
 	   int i,j;
-       for (i=0 ; i<NoOfChrX*NoOfChrY ; i++) 
+       for (i=0 ; i<NoOfChrX*NoOfChrY ; i++)
        { //save AFLI bitmap data
         ConvertAFLIchr(i); //converts and makes the clash-testing
         for (j=0; j<8; j++) pack_putc(ConvChr[0][j][0],PRGFile); //pack_fwrite(&ConvChr,8,PRGFile);
        }
        for (i=0; i<21; i++) { pack_putc(0x55,PRGFile); pack_putc(0xAA,PRGFile); pack_putc(0xFF,PRGFile); } //FLI-bug underlay-sprite rows
-       pack_putc(0,PRGFile); //last hidden byte of underlay-sprite 
+       pack_putc(0,PRGFile); //last hidden byte of underlay-sprite
        int lowSpH=16; //lowest sprite's height
-       for (i=0; i<21; i++) { pack_putc((i<lowSpH)?0x55:0,PRGFile); pack_putc((i<lowSpH)?0xAA:0,PRGFile); pack_putc((i<lowSpH)?0xFF:0,PRGFile); } //FLI-bug underlay-sprite rows 
-       pack_putc(0,PRGFile); //last hidden byte of underlay-sprite 
+       for (i=0; i<21; i++) { pack_putc((i<lowSpH)?0x55:0,PRGFile); pack_putc((i<lowSpH)?0xAA:0,PRGFile); pack_putc((i<lowSpH)?0xFF:0,PRGFile); } //FLI-bug underlay-sprite rows
+       pack_putc(0,PRGFile); //last hidden byte of underlay-sprite
        for (i=0 ; i<(0x2000-0x1fc0); i++) pack_putc(0,PRGFile); //leave the gap between bitmap and colmap
        for (i=0; i<7; i++)
        { //save AFLI colour-data (8 video-RAMs)
@@ -2563,12 +2443,12 @@
        pack_fwrite(&FLIbugCol1,sizeof(unsigned char),PRGFile);
        pack_fwrite(&FLIbugCol2,sizeof(unsigned char),PRGFile);
        pack_fwrite(&FLIbugCol3,sizeof(unsigned char),PRGFile);
-       
+
 	}
 
-void SavePRG(char *filepath)   //write a new binary file with the graphic-data  
+void SavePRG(char *filepath)   //write a new binary file with the graphic-data
      {
-      int colournum, i, j; //colournum signs how many colours (layers) the specific Char contains      
+      int colournum, i, j; //colournum signs how many colours (layers) the specific Char contains
       PACKFILE *PRGFile = pack_fopen(filepath,"w");
       if (AFLImode==0)
       { //normal hires-bitmap export
@@ -2588,11 +2468,11 @@
       }
       GridDrawer(GridCol);
       pack_fclose(PRGFile);
-     } 
+     }
 
-void SaveEXE(char *filepath)   //write a new binary file with the graphic-data  
+void SaveEXE(char *filepath)   //write a new binary file with the graphic-data
      {
-      int colournum, i,j; //colournum signs how many colours (layers) the specific Char contains      
+      int colournum, i,j; //colournum signs how many colours (layers) the specific Char contains
       PACKFILE *PRGFile = pack_fopen(filepath,"w");
       //textprintf_ex(screen,font,TxtInfoPosX, TxtInfoPosY-14,0x80FFFF,0x0000FF,"%s",filename);
       //pack_fwrite(&BASICstartAdd,2,PRGFile);  //already contained in the array!
@@ -2616,7 +2496,7 @@
       }
       GridDrawer(GridCol);
       pack_fclose(PRGFile);
-     } 
+     }
 
 int ExportC64() //save the data in C64 Bitmap (Art Studio 1) format .prg binary file (load-address included)
     {
@@ -2648,8 +2528,8 @@
       char * filename=get_filename(SAVEpath);
       if (ExeCaption[0]==0) { for (i=0;i<24&&filename[i];i++) ExeCaption[i]=filename[i]; ExeCaption[i]=0;}
 
-      set_dialog_color(EditCaption, gui_fg_color, gui_bg_color); 
-      EditCaption[0].x=GuiSizeX-245; EditCaption[0].y=GuiSizeY-100; 
+      set_dialog_color(EditCaption, gui_fg_color, gui_bg_color);
+      EditCaption[0].x=GuiSizeX-245; EditCaption[0].y=GuiSizeY-100;
       EditCaption[1].x=GuiSizeX-230; EditCaption[1].y=GuiSizeY-70; EditCaption[1].fg=0xFFFFFF; EditCaption[1].bg=0;
       EditCaption[2].x=GuiSizeX-130; EditCaption[2].y=GuiSizeY-90; EditCaption[2].fg=0xFFFFFF; EditCaption[2].dp=(char*)"Edit caption, press Enter.";
       popup_dialog(EditCaption,1);
@@ -2702,8 +2582,8 @@
      remove_timer();
      if (RButt==1 || (key_shifts & KB_SHIFT_FLAG)) //middle button? Shift pressed with the key?
      {
-      if (GridMode>0) { GridMode--; GridDrawer(GridCol); } 
-      else { GridMode=2; GridDrawer(0); } 
+      if (GridMode>0) { GridMode--; GridDrawer(GridCol); }
+      else { GridMode=2; GridDrawer(0); }
      }
      else
      {
@@ -2714,19 +2594,19 @@
      SetTimer();
      return (D_REDRAWME|D_WANTFOCUS);
     }
-    
+
 void AFLIbuttonCol()
 	{
 	 HermIRESdialog[33].bg=0x808080*AFLImode; HermIRESdialog[33].fg=(AFLImode)?0xf0f0f0:0x404040;
 	}
- 
+
 int ToggleAFLImode()
 	{
      remove_timer();
      AFLImode=(AFLImode)?false:true;
      AFLIbuttonCol(); GridDrawer(0); SettingDispl(); dispGridBri(); PrevDrawer();
      SetTimer();
-     return (D_REDRAWME|D_WANTFOCUS);     
+     return (D_REDRAWME|D_WANTFOCUS);
 	}
 
 int ClashTest()
@@ -2738,7 +2618,7 @@
       else ClashTestMode=4;
      }
      else
-     { 
+     {
       if (ClashTestMode<4) { ClashTestMode++; DetectClashes(); } //if (ClashTestMode==false) { ClashTestMode=true; DetectClashes(); }
       else { ClashTestMode=0; } //else { ClashTestMode=false; GridDrawer(GridCol); }
      }
@@ -2769,7 +2649,7 @@
      else
      {
       if (CRTmode<3) { CRTmode++; } //if (CRTmode==false) { CRTmode=true; GridDrawer(GridCol); }
-      else { CRTmode=0; } //else { CRTmode=false; GridDrawer(GridCol); }         
+      else { CRTmode=0; } //else { CRTmode=false; GridDrawer(GridCol); }
      }
      GridDrawer(GridCol); PrevDrawer(); SettingDispl();
      SetTimer();
@@ -2795,14 +2675,14 @@
 int ResetBrightness()
 {
  HermIRESdialog[17].d2=128;
- object_message(&HermIRESdialog[17],MSG_DRAW,0); 
+ object_message(&HermIRESdialog[17],MSG_DRAW,0);
  return SetBrightness();
 }
 
 int ResetPALblur()
 {
  HermIRESdialog[18].d2=DefaultBlur;
- object_message(&HermIRESdialog[18],MSG_DRAW,0); 
+ object_message(&HermIRESdialog[18],MSG_DRAW,0);
  return SetBlur();
 }
 
@@ -2968,7 +2848,7 @@
       if(UndoPointer != UndoBase)
       {
        UndoPointer--; UndoPointer &= 0xFF;
-       GetBmpFromUndo(); 
+       GetBmpFromUndo();
       }
      }
 
diff -uNr src.clean/linux.h src.modified/linux.h
--- src.clean/linux.h	1970-01-01 01:00:00.000000000 +0100
+++ src.modified/linux.h	2013-06-03 02:07:46.603428471 +0100
@@ -0,0 +1,55 @@
+//------------------------ Operating system specific ---------------------------
+#if defined ALLEGRO_WITH_XWINDOWS && defined ALLEGRO_USE_CONSTRUCTOR
+// XPM program-icon for linux
+static const char *allegico_xpm[] = {
+"32 32 8 1 ", // columns, rows, colors, chars-per-pixel
+"  c black",
+". c #494949494949",
+"X c #6D6D6D6D6D6D",
+"o c #B6B600000000",
+"O c #B6B624242424",
+"+ c #6D6D6D6DDBDB",
+"@ c #6D6D6D6DFFFF",
+"# c #B6B6B6B6B6B6",
+/* pixels */
+"                                ",
+"                                ",
+"   .       .       .       .    ",
+"   X       X@@@@@@@X       X    ",
+"   #     @@#@@@@@@@#       #    ",
+"   #    @@@#@@@@@@@#       #    ",
+" .###########################.  ",
+"   #  @@@@@#@@@@@@@#       #    ",
+"   # @@@@@@#@@@@@@@#       #    ",
+"   # @+@@@@#       #@@++++@#    ",
+"   #++++++ #       #+++++++#    ",
+"   #@@@@@@ #       #@@@@@@ #    ",
+"   #@@@@@@ #       #@@@@@  #    ",
+"   #@@@@@@ #       #@@@@   #    ",
+" .###########################.  ",
+"   #@@@@@@ #       #oooo   #    ",
+"   #@@@@@@ #       #ooooo  #    ",
+"   #@@@@@@ #       #oooooo #    ",
+"   #++++++ #       #OOOOOOO#    ",
+"   # @@@@@@#       #ooooooo#    ",
+"   # @@@@@@#@@@@@@@#       #    ",
+"   #  @@@@@#@@@@@@@#       #    ",
+" .###########################.  ",
+"   #    @@@#@@@@@@@#       #    ",
+"   #     @@#@@@@@@@#       #    ",
+"   #      @#@@@@@@@#       #    ",
+"   #       #       #       #    ",
+"   #       #       #       #    ",
+"   X       X       X       X    ",
+"   .       .       .       .    ",
+"                                ",
+"                                "
+};
+extern void *allegro_icon;
+CONSTRUCTOR_FUNCTION(static void _set_allegro_icon(void));
+static void _set_allegro_icon(void)
+{
+    allegro_icon = allegico_xpm;
+}
+#endif
+
